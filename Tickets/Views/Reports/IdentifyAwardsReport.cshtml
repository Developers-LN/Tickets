@model List<Tickets.Models.Raffle>

@{
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "REPORTE DE IDENTIFICACION DE PREMIOS";

    var context = new Tickets.Models.TicketsEntities();
    var config = context.SystemConfigs.FirstOrDefault();
    string adminName = config != null ? config.LoteryAdmin : "";
    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("es-DO");
    int clientId = (int)ViewBag.clientId;
}

<style>
    .col-lg-12 {
        width: 100%;
        float: left;
    }

    .col-lg-4 {
        width: 33.333%;
        float: left;
    }

    .col-lg-6 {
        width: 50%;
        float: left;
    }

    .text-center {
        text-align: center;
    }

    .text-right {
        text-align: right;
    }

    .text-left {
        text-align: left;
    }

    .no-padder {
        padding-left: 0px;
        padding-right: 0px;
    }
</style>

<div class="col-lg-12">
    <div class="col-lg-12 no-padder text-center">
        <div class="col-lg-12 no-padder text-center" style="margin-top: 50px;">
            <img style="height:65px; width:auto; margin-bottom:5px;" src="~/Images/logo.png" />
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>MINISTERIO DE HACIENDA</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>ADMINISTRACIÓN DE LA LOTERÍA NACIONAL</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>REPORTE IDENTIFICACIÓN DE PREMIOS</b>
        </div>
    </div>
    <div class="col-lg-12 no-padder">
        <div class="col-lg-6 no-padder text-right">
        </div>
        <div class="col-lg-6 no-padder text-right">
            <b>Fecha: </b> @DateTime.Now.ToString("dd/MM/yyyy") <br />
            <b>Hora: </b> @DateTime.Now.ToString("hh:mm:ss tt") <br />
        </div>
    </div>
    <div>
        <div class="col-lg-12 no-padder">
            <table class="table">
                <thead>
                    <tr>
                        <th class="text-center">FILA</th>
                        <th class="text-center">LOTE</th>
                        <th class="text-center">FECHA</th>
                        <th class="text-center">NUMERO</th>
                        <th class="text-center">TIPO DE PREMIO</th>
                        <th class="text-center">FRACCIONES DESDE-HASTA</th>
                        <th class="text-center">CANTIDAD FRACCIONES</th>
                        <th class="text-center">VALOR FRACCCION</th>
                        <th class="text-right">TOTAL</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var raffle in Model.Where(w => w.Statu == (int)Tickets.Models.Enums.RaffleStatusEnum.Generated))
                    {
                        int totalRows = 0;
                        int totalfractions = 0;
                        decimal totalmoney = 0;
                        var clients = context.Clients.Where(w => (w.Statu == (int)Tickets.Models.Enums.ClientStatuEnum.Approbed && w.IdentifyBaches.Count() > 0) && (clientId == 0 || w.Id == clientId)).ToList();
                        var raffleName = raffle.Symbol + raffle.Separator + raffle.SequenceNumber + " " + raffle.Name + " " + raffle.DateSolteo.ToString("dd/MM/yyyy");
                        <tr>
                            <th colspan="9" class="text-center">@raffleName</th>
                        </tr>
                        foreach (var c in clients)
                        {
                            int rows = 1;
                            int totalFraction = 0;
                            decimal totalGeneral = 0;
                            var identifyNumbers = context.IdentifyNumbers.Where(w => w.IdentifyBach.RaffleId == raffle.Id && w.IdentifyBach.ClientId == c.Id &&
                            (w.IdentifyBach.Statu == (int)Tickets.Models.Enums.BachIdentifyStatuEnum.Approved || w.IdentifyBach.Statu == (int)Tickets.Models.Enums.BachIdentifyStatuEnum.Fatured)).OrderBy(i => new
                            {
                                i.IdentifyBachId,
                                i.TicketAllocationNumber.Number,
                                i.FractionFrom,
                            });

                            /*var totalFraction2 = identifyNumbers
                            .Select(s => new
                            {
                                s.NumberId,
                                total = s.FractionTo - s.FractionFrom + 1,
                                s.FractionFrom,
                                s.FractionTo,
                                s.
                            }).Distinct().ToList();
                            totalFraction = totalFraction2.Sum(s => s.total);*/

                            var clientDesc = c.Id + " - " + c.Name;
                            if (identifyNumbers.Count() != 0)
                            {
                                <tr>
                                    <th colspan="9" class="text-center">@clientDesc</th>
                                </tr>
                                foreach (var number in identifyNumbers)
                                {
                                    var raffleAwardList = raffle.RaffleAwards.Where(rw => rw.ControlNumber == number.TicketAllocationNumber.Number).OrderBy(o => o.Award.OrderAward).ToList();
                                    foreach (var raffleAward in raffleAwardList)
                                    {
                                        decimal price = 0;
                                        decimal total = 0;

                                        if (raffleAward.Fraction != 0)
                                        {
                                            price = raffleAward.Award.Value;
                                            total = price;
                                        }
                                        else
                                        {
                                            price = raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber);
                                            total = (number.FractionTo - number.FractionFrom + 1) * price;
                                        }

                                        <tr>
                                            <td class="text-center">@rows</td>
                                            <td class="text-center">@number.IdentifyBach.SequenceNumber</td>
                                            <td class="text-center">@number.IdentifyBach.CreateDate.ToString("dd/MM/yyyy")</td>
                                            <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft((raffle.Prospect.Production - 1).ToString().Length, '0')</td>
                                            <td class="text-center">@raffleAward.Award.Name</td>
                                            <td class="text-center">@(raffleAward.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? raffleAward.Fraction : number.FractionFrom)  - @(raffleAward.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? raffleAward.Fraction : number.FractionTo)</td>
                                            <td class="text-center">@(raffleAward.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? 1 : (number.FractionTo - number.FractionFrom + 1))</td>
                                            <td class="text-center">@(raffleAward.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? raffleAward.Award.Value.ToString("c", new System.Globalization.CultureInfo("es-DO")) : price.ToString("c", new System.Globalization.CultureInfo("es-DO")))</td>
                                            <td class="text-right">@total.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        </tr>
                                        totalGeneral += total;
                                        totalmoney += total;
                                        totalFraction += raffleAward.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? 1 : (number.FractionTo - number.FractionFrom + 1);

                                        rows += 1;
                                    }
                                }
                                <tr class="sub-total">
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td class="text-center"><strong> @((totalFraction).ToString("n0", new System.Globalization.CultureInfo("es-DO")))</strong></td>
                                    <td class="text-right" colspan="2">Subtotal a pagar: <strong> @((totalGeneral).ToString("c", new System.Globalization.CultureInfo("es-DO")))</strong></td>
                                </tr>
                                totalRows += rows;
                                totalfractions += totalFraction;
                            }
                        }
                        <tr class="sub-total">
                            <td class="text-center">@totalRows</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td class="text-center"><strong> @((totalfractions).ToString("n0", new System.Globalization.CultureInfo("es-DO")))</strong></td>
                            <td class="text-right" colspan="2">Subtotal a pagar: <strong> @((totalmoney).ToString("c", new System.Globalization.CultureInfo("es-DO")))</strong></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="col-lg-12 no-padder text-center">
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Facturado por Cliente
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Recibido por Btes. Pdos.
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Perforado
    </div>
</div>
<div class="col-lg-12 no-padder text-center" style="margin-top:15px;">
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Facturado
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Revisado por
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Autorizado por
    </div>
</div>
