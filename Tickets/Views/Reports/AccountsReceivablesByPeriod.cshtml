@model IEnumerable<Tickets.Models.ModelsProcedures.ModelProcedure_SalesAndPendingPayments>

@{
    var context = new Tickets.Models.TicketsEntities();
    var config = context.SystemConfigs.FirstOrDefault();
    var idRaffleList = Model.AsEnumerable().GroupBy(r => r.IdRaffle).Select(s => s.Key).ToList();
    var RaffleData = context.Raffles.Where(w => idRaffleList.Contains(w.Id)).ToList();
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    if (idRaffleList.Count() == 1)
    {
        ViewBag.Title = "REPORTE DE COBROS REALIZADOS EN EL PERIODO " + ViewBag.startDate + " Y " + ViewBag.endDate + " DEL SORTEO " + RaffleData.FirstOrDefault().SequenceNumber;
    }
    else
    {
        ViewBag.Title = "REPORTE DE COBROS REALIZADOS EN EL PERIODO " + ViewBag.startDate + " y " + ViewBag.endDate;
    }

    string adminName = config != null ? config.CreditosCobros : "";
    string adminCargo = config != null ? config.CreditosCobrosCargo : "";
    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("es-DO");
}

<style>
    .col-lg-12 {
        width: 100%;
        float: left;
    }

    .col-lg-4 {
        width: 33.333%;
        float: left;
    }

    .col-lg-6 {
        width: 50%;
        float: left;
    }

    .text-center {
        text-align: center;
    }

    .text-right {
        text-align: right;
    }

    .text-left {
        text-align: left;
    }

    .no-padder {
        padding-left: 5px;
        padding-right: 5px;
    }
</style>

<div class="col-lg-12">
    <div class="col-lg-12 no-padder text-center">
        <div class="col-lg-12 no-padder text-center" style="margin-top: 50px;">
            <img style="height:65px; width:auto; margin-bottom:5px;" src="~/Images/logo.png" />
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>MINISTERIO DE HACIENDA</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>ADMINISTRACION DE LA LOTERIA NACIONAL</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>REPORTE DE COBROS REALIZADOS EN EL PERIODO @ViewBag.startDate Y @ViewBag.endDate</b>
            <br />
            @if (idRaffleList.Count() == 1)
            {
                var RaffleData2 = RaffleData.FirstOrDefault(f => f.Id == Model.FirstOrDefault().IdRaffle);
                <b>DEL SORTEO @RaffleData2.Symbol @RaffleData2.Separator @RaffleData2.SequenceNumber @RaffleData2.Name @RaffleData2.DateSolteo.ToShortDateString()</b>
            }
        </div>
    </div>
    <div class="col-lg-12 no-padder">
        <div class="col-lg-6 no-padder text-left">
        </div>
        <div class="col-lg-6 no-padder text-right">
            <b>Fecha: </b> @DateTime.Now.ToShortDateString() <br />
            <b>Hora: </b> @DateTime.Now.ToShortTimeString() <br />
        </div>
    </div>
    <div>
        <div class="col-lg-12 no-padder">
            <table class="table">
                <thead>
                    <tr>
                        <th class="text-center">Factura</th>
                        <th class="text-center">Fecha</th>
                        <th class="text-center">Estado</th>
                        <th class="text-right">Cantidad</th>
                        <th class="text-right">Descuento</th>
                        <th class="text-right">Cantidad Total</th>
                        <th class="text-right">Cantidad Pagado</th>
                        <th class="text-right">Cantidad Restante</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        decimal totalGeneralInvoice = 0.0m;
                        decimal totalGeneralDiscount = 0.0m;
                        decimal totalGeneral = 0.0m;
                        decimal totalGeneralRest = 0.0m;
                        decimal totalGeneralPayment = 0.0m;

                        var info = Model.AsEnumerable().GroupBy(r => r.IdRaffle).Select(s => new
                        {
                            RaffleId = s.FirstOrDefault().IdRaffle,
                            RaffleName = s.FirstOrDefault().NameRaffle,
                            clients = s.GroupBy(c => c.IdClient).Select(c => new
                            {
                                ClientId = c.FirstOrDefault().IdClient,
                                ClientName = c.FirstOrDefault().NameClient,
                                ClientType = c.FirstOrDefault().TypeClient,
                                invoices = s.GroupBy(i => i.IdInvoice).Select(i => new
                                {
                                    ClientId = i.FirstOrDefault().IdClient,
                                    InvoiceId = i.FirstOrDefault().IdInvoice,
                                    SequenceNumberInvoice = i.FirstOrDefault().SequenceNumberInvoice,
                                    ReceivableStatus = i.FirstOrDefault().ReceivableStatusId,
                                    InvoiceDate = i.FirstOrDefault().DateInvoice.ToString("dd/MM/yyyy"),
                                    InvoiceStatus = i.FirstOrDefault().StatusInvoice,
                                    InvoiceTotal = i.FirstOrDefault().TotalInvoice,
                                    InvoiceDiscount = i.FirstOrDefault().TotalDiscount,
                                    TotalToPay = i.FirstOrDefault().TotalToPay,
                                    TotalCash = i.FirstOrDefault().CashPayment,
                                    TotalNoteCredit = i.FirstOrDefault().NoteCreditPayment,
                                    TotalPending = i.FirstOrDefault().TotalPending,
                                    ReportType = i.FirstOrDefault().ReportType
                                }).Where(w => w.ClientId == c.FirstOrDefault().IdClient).ToList()
                            }).ToList()
                        }).ToList();

                        switch (Model.FirstOrDefault().ReportType)
                        {
                            case (int)Tickets.Models.Enums.ReceivableTypeEnum.Pending:
                                info = info.Select(s => new
                                {
                                    s.RaffleId,
                                    s.RaffleName,
                                    clients = s.clients.Select(c => new
                                    {
                                        c.ClientId,
                                        c.ClientName,
                                        c.ClientType,
                                        invoices = c.invoices.Select(i => new
                                        {
                                            i.ClientId,
                                            i.InvoiceId,
                                            i.SequenceNumberInvoice,
                                            i.ReceivableStatus,
                                            i.InvoiceDate,
                                            i.InvoiceStatus,
                                            i.InvoiceTotal,
                                            i.InvoiceDiscount,
                                            i.TotalToPay,
                                            i.TotalCash,
                                            i.TotalNoteCredit,
                                            i.TotalPending,
                                            i.ReportType
                                        }).Where(w => w.ReceivableStatus == (int)Tickets.Models.Enums.ReceivableTypeEnum.Pending).ToList()
                                    }).ToList()
                                }).ToList();
                                break;
                            case (int)Tickets.Models.Enums.ReceivableTypeEnum.Payed:
                                info = info.Select(s => new
                                {
                                    s.RaffleId,
                                    s.RaffleName,
                                    clients = s.clients.Select(c => new
                                    {
                                        c.ClientId,
                                        c.ClientName,
                                        c.ClientType,
                                        invoices = c.invoices.Select(i => new
                                        {
                                            i.ClientId,
                                            i.InvoiceId,
                                            i.SequenceNumberInvoice,
                                            i.ReceivableStatus,
                                            i.InvoiceDate,
                                            i.InvoiceStatus,
                                            i.InvoiceTotal,
                                            i.InvoiceDiscount,
                                            i.TotalToPay,
                                            i.TotalCash,
                                            i.TotalNoteCredit,
                                            i.TotalPending,
                                            i.ReportType
                                        }).Where(w => w.ReceivableStatus == (int)Tickets.Models.Enums.ReceivableTypeEnum.Payed).ToList()
                                    }).ToList()
                                }).ToList();
                                break;
                            case (int)Tickets.Models.Enums.ReceivableTypeEnum.expired:
                                info = info.Select(s => new
                                {
                                    s.RaffleId,
                                    s.RaffleName,
                                    clients = s.clients.Select(c => new
                                    {
                                        c.ClientId,
                                        c.ClientName,
                                        c.ClientType,
                                        invoices = c.invoices.Select(i => new
                                        {
                                            i.ClientId,
                                            i.InvoiceId,
                                            i.SequenceNumberInvoice,
                                            i.ReceivableStatus,
                                            i.InvoiceDate,
                                            i.InvoiceStatus,
                                            i.InvoiceTotal,
                                            i.InvoiceDiscount,
                                            i.TotalToPay,
                                            i.TotalCash,
                                            i.TotalNoteCredit,
                                            i.TotalPending,
                                            i.ReportType
                                        }).Where(w => w.ReceivableStatus == (int)Tickets.Models.Enums.ReceivableTypeEnum.expired).ToList()
                                    }).ToList()
                                }).ToList();
                                break;
                            case (int)Tickets.Models.Enums.ReceivableTypeEnum.Exonerated:
                                info = info.Select(s => new
                                {
                                    s.RaffleId,
                                    s.RaffleName,
                                    clients = s.clients.Select(c => new
                                    {
                                        c.ClientId,
                                        c.ClientName,
                                        c.ClientType,
                                        invoices = c.invoices.Select(i => new
                                        {
                                            i.ClientId,
                                            i.InvoiceId,
                                            i.SequenceNumberInvoice,
                                            i.ReceivableStatus,
                                            i.InvoiceDate,
                                            i.InvoiceStatus,
                                            i.InvoiceTotal,
                                            i.InvoiceDiscount,
                                            i.TotalToPay,
                                            i.TotalCash,
                                            i.TotalNoteCredit,
                                            i.TotalPending,
                                            i.ReportType
                                        }).Where(w => w.ReceivableStatus == (int)Tickets.Models.Enums.ReceivableTypeEnum.Exonerated).ToList()
                                    }).ToList()
                                }).ToList();
                                break;
                            default:
                                info = info.ToList();
                                break;
                        }
                    }
                    @foreach (var raffle in info)
                    {
                        decimal totalRaffleInvoice = 0.0m;
                        decimal totalRaffleDiscount = 0.0m;
                        decimal totalGeneralRaffle = 0.0m;
                        decimal totalRaffleRest = 0.0m;
                        decimal totalRafflePayment = 0.0m;

                        var raffleName = RaffleData.Where(f => f.Id == raffle.RaffleId).Select(s => new
                        {
                            Name = s.Symbol + s.Separator + s.Id + " " + s.Name + " " + s.DateSolteo.ToShortDateString()
                        }).FirstOrDefault();

                        <tr>
                            <th colspan="8" class="text-center">@raffleName.Name</th>
                        </tr>

                        foreach (var client in raffle.clients.Where(w => w.invoices.Count() > 0))
                        {
                            decimal totalClientInvoice = 0.0m;
                            decimal totalClientDiscount = 0.0m;
                            decimal totalClientRaffle = 0.0m;
                            decimal totalClientRest = 0.0m;
                            decimal totalClientPayment = 0.0m;

                            <tr>
                                <th colspan="8" class="text-center">@client.ClientId - @client.ClientName - @client.ClientType</th>
                            </tr>

                            foreach (var invoice in client.invoices)
                            {
                                <tr>
                                    <td class="text-center">@invoice.SequenceNumberInvoice</td>
                                    <td class="text-center">@invoice.InvoiceDate</td>
                                    <td class="text-center">@invoice.InvoiceStatus</td>
                                    <td class="text-right">@invoice.InvoiceTotal.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    <td class="text-right">@invoice.InvoiceDiscount.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    <td class="text-right">@invoice.TotalToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    <td class="text-right">@((invoice.TotalCash + invoice.TotalNoteCredit).ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                                    <td class="text-right">@invoice.TotalPending.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                </tr>
                                totalClientInvoice += invoice.InvoiceTotal;
                                totalClientDiscount += invoice.InvoiceDiscount;
                                totalClientRaffle += invoice.TotalToPay;
                                totalClientPayment += (invoice.TotalCash + invoice.TotalNoteCredit);
                                totalClientRest += invoice.TotalPending;

                                totalRaffleInvoice += invoice.InvoiceTotal;
                                totalRaffleDiscount += invoice.InvoiceDiscount;
                                totalGeneralRaffle += invoice.TotalToPay;
                                totalRafflePayment += (invoice.TotalCash + invoice.TotalNoteCredit);
                                totalRaffleRest += invoice.TotalPending;

                                totalGeneralInvoice += invoice.InvoiceTotal;
                                totalGeneralDiscount += invoice.InvoiceDiscount;
                                totalGeneral += invoice.TotalToPay;
                                totalGeneralPayment += (invoice.TotalCash + invoice.TotalNoteCredit);
                                totalGeneralRest += invoice.TotalPending;
                            }
                            <tr class="sub-total" style="font-weight:bold">
                                <td class="text-right" colspan="3">Total Cliente: </td>
                                <td class="text-right">@(totalClientInvoice.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                                <td class="text-right">@(totalClientDiscount.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                                <td class="text-right">@(totalClientRaffle.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                                <td class="text-right">@(totalClientPayment.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                                <td class="text-right">@(totalClientRest.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                            </tr>
                        }
                        <tr class="sub-total" style="font-weight:bold">
                            <td class="text-right" colspan="3">Total Sorteo: </td>
                            <td class="text-right">@(totalRaffleInvoice.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                            <td class="text-right">@(totalRaffleDiscount.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                            <td class="text-right">@(totalGeneralRaffle.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                            <td class="text-right">@(totalRafflePayment.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                            <td class="text-right">@(totalRaffleRest.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="total" style="font-weight:bold">
                        <td class="text-right" colspan="3">Total General:..</td>
                        <td class="text-right">@(totalGeneralInvoice.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                        <td class="text-right">@(totalGeneralDiscount.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                        <td class="text-right">@(totalGeneral.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                        <td class="text-right">@(totalGeneralPayment.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                        <td class="text-right">@(totalGeneralRest.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <div class="col-lg-12 no-padder text-center">
        <br />
        <br />
        <br />
        <br />
        <div class="col-lg-4 col-md-6 col-sm-6 text-center">
            <div class="col-lg-12 no-padder text-center">
                ______________________________
            </div>
            Encargada división de créditos y cobros
        </div>
        <div class="col-lg-4 col-md-6 col-sm-6 text-center">
            <div class="col-lg-12 no-padder text-center">

            </div>
        </div>
        <div class="col-lg-4 col-md-6 col-sm-6 text-center">
            <div class="col-lg-12 no-padder text-center">
                ______________________________
            </div>
            Directora financiera
        </div>
    </div>

    @*<div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <b>@adminName</b><br />
            <span>@adminCargo</span>
        </div>*@
</div>
