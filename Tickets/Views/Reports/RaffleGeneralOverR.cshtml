@model IEnumerable<Tickets.Models.ModelsProcedures.ModelProcedure_CuadreSorteo>

@{
    var context = new Tickets.Models.TicketsEntities();
    var config = context.SystemConfigs.FirstOrDefault();
    string adminName = config != null ? config.ControlPremio : "";
    string adminCargo = config != null ? config.ControlPremioCargo : "";

    int raffleid = Model.Select(s => s.RaffleId).FirstOrDefault();
    var RaffleData = context.Raffles.Where(w => w.Id == raffleid).FirstOrDefault();

    var totalQuantity = 0; var totalMont = 0.0m;
    var houceQuantity = 0; var houceMont = 0.0m;
    var invoiceQuantity = 0; var invoiceMont = 0.0m;
    var noallocateQuantity = 0; var noallocateMont = 0.0m;

    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "REPORTE RESUMIDO DEL SORTEO " + RaffleData.Symbol + RaffleData.Separator + RaffleData.SequenceNumber;
}
<style>
    .col-lg-12 {
        width: 100%;
        float: left;
    }

    .col-lg-4 {
        width: 33.333%;
        float: left;
    }

    .col-lg-3 {
        width: 25%;
        float: left;
    }

    .col-lg-8 {
        width: 66.666%;
        float: left;
    }

    .col-lg-6 {
        width: 50%;
        float: left;
    }

    .text-center {
        text-align: center;
    }

    .text-right {
        text-align: right;
    }

    .text-left {
        text-align: left;
    }

    .no-padder {
        padding-left: 5px;
        padding-right: 5px;
    }

    table tr th {
        text-align: center;
    }

    table tr.t-r td {
        text-align: right;
    }
</style>
<div class="col-lg-12 col-md-12 col-sm-12">
    <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <img style="height:65px; width:auto; margin-bottom:5px;" src="~/Images/logo.png" />
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <b>MINISTERIO DE HACIENDA</b><br />
            <b>ADMINISTRACION DE LA LOTERIA NACIONAL</b><br />
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            DETALLE DE FACTURAS SORTEO <br />
            @RaffleData.Symbol @RaffleData.Separator @RaffleData.SequenceNumber @RaffleData.Name <br />
            DE FECHA @RaffleData.DateSolteo.ToString("dd/MM/yyyy")
        </div>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 no-padder">
        <table class="table">
            <thead>
                <tr>
                    <th>PREMIO</th>
                    <th colspan="2" style="border-bottom: solid #8C8C8C 2px;">PROSPECTO</th>
                    <th colspan="2" style="border-bottom: solid #8C8C8C 2px;">EN LA CASA</th>
                    <th colspan="2" style="border-bottom: solid #8C8C8C 2px;">EN LA CALLE</th>
                    <th colspan="2" style="border-bottom: solid #8C8C8C 2px;">NO IMPRESO</th>
                </tr>
                <tr>
                    <th style="border-right: solid #8C8C8C 2px;"> </th>
                    <th>Cantidad frac.</th>
                    <th style="border-right: solid #8C8C8C 1px;">MONTO RD$</th>

                    <th>Cantidad frac.</th>
                    <th style="border-right: solid #8C8C8C 1px;">MONTO RD$</th>

                    <th>Cantidad frac.</th>
                    <th style="border-right: solid #8C8C8C 1px;">MONTO RD$</th>

                    <th>Cantidad frac.</th>
                    <th style="border-right: solid #8C8C8C 1px;">MONTO RD$</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="t-r">
                        <td style="text-align:left; border-right: solid #8C8C8C 1px;">@item.Premio</td>

                        <td>@item.ProspectoFracciones.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                        <td style="border-right: solid #8C8C8C 1px;">@item.MontoPremioProspecto.ToString("n", new System.Globalization.CultureInfo("es-DO"))</td>

                        <td>@item.CasaFracciones.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                        <td style="border-right: solid #8C8C8C 1px;">@item.CasaMonto.ToString("n", new System.Globalization.CultureInfo("es-DO"))</td>

                        <td>@item.CalleFracciones.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                        <td style="border-right: solid #8C8C8C 1px;">@item.CalleMonto.ToString("n", new System.Globalization.CultureInfo("es-DO"))</td>

                        <td>@item.NoImpresoFracciones.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                        <td style="border-right: solid #8C8C8C 1px;">@item.NoImpresoMonto.ToString("n", new System.Globalization.CultureInfo("es-DO"))</td>
                    </tr>

                    totalQuantity += item.ProspectoFracciones;
                    totalMont += item.MontoEnPremios;
                    houceQuantity += item.CasaFracciones;
                    houceMont += item.CasaMonto;
                    invoiceQuantity += item.CalleFracciones;
                    invoiceMont += item.CalleMonto;
                    noallocateQuantity += item.NoImpresoFracciones;
                    noallocateMont += item.NoImpresoMonto;
                }
            </tbody>
            <tfoot>
                <tr class="total">
                    <td></td>
                    <td class="text-right">@totalQuantity.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                    <td class="text-right">@totalMont.ToString("N", new System.Globalization.CultureInfo("es-DO"))</td>

                    <td class="text-right">@houceQuantity.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                    <td class="text-right">@houceMont.ToString("N", new System.Globalization.CultureInfo("es-DO"))</td>

                    <td class="text-right">@invoiceQuantity.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                    <td class="text-right">@invoiceMont.ToString("N", new System.Globalization.CultureInfo("es-DO"))</td>

                    <td class="text-right">@noallocateQuantity.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                    <td class="text-right">@noallocateMont.ToString("N", new System.Globalization.CultureInfo("es-DO"))</td>
                </tr>
            </tfoot>
        </table>
    </div>

    <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
        <b>@adminName</b><br />
        <span>@adminCargo</span>
    </div>
</div>


@*@model Tickets.Models.Raffles.RaffleModel
    @{
        Layout = "~/Views/Shared/_ReportLayout.cshtml";
        ViewBag.Title = "";

        var context = new Tickets.Models.TicketsEntities();
        var config = context.SystemConfigs.FirstOrDefault();
        string adminName = config != null ? config.LoteryAdmin : "";
        string adminCargo = config != null ? config.Cargo : "";
    }
    <style>
        .col-lg-12 {
            width: 100%;
            float: left;
        }

        .col-lg-4 {
            width: 33.333%;
            float: left;
        }

        .col-lg-3 {
            width: 25%;
            float: left;
        }

        .col-lg-8 {
            width: 66.666%;
            float: left;
        }

        .col-lg-6 {
            width: 50%;
            float: left;
        }

        .text-center {
            text-align: center;
        }

        .text-right {
            text-align: right;
        }

        .text-left {
            text-align: left;
        }

        .no-padder {
            padding-left: 5px;
            padding-right: 5px;
        }

        table tr th {
            text-align: center;
        }

        table tr.t-r td {
            text-align: right;
        }
    </style>
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
                <img style="height:65px; width:auto; margin-bottom:5px;" src="~/Images/logo.png" />
            </div>
            <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
                <b>MINISTERIO DE HACIENDA</b><br />
                <b>ADMINISTRACION DE LA LOTERIA NACIONAL</b><br />
            </div>
            <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
                <b>DETALLE DE FACTURAS SORTEO no.@Model.Id DE FECHA @Model.RaffleDate.ToShortDateString()</b>
            </div>
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder">
            <table class="table">
                <thead>
                    <tr>
                        <th>PREMIO</th>
                        <th colspan="2" style="border-bottom: solid #8C8C8C 2px;">PROSPECTO</th>
                        <th colspan="2" style="border-bottom: solid #8C8C8C 2px;">EN LA CASA</th>
                        <th colspan="2" style="border-bottom: solid #8C8C8C 2px;">EN LA CALLE</th>
                        <th colspan="2" style="border-bottom: solid #8C8C8C 2px;">NO IMPRESO</th>
                    </tr>
                    <tr>
                        <th style="border-right: solid #8C8C8C 2px;"> </th>
                        <th>Cantidad frac.</th>
                        <th style="border-right: solid #8C8C8C 1px;">Monto RD$</th>

                        <th>Cantidad frac.</th>
                        <th style="border-right: solid #8C8C8C 1px;">Monto RD$</th>

                        <th>Cantidad frac.</th>
                        <th style="border-right: solid #8C8C8C 1px;">Monto RD$</th>

                        <th>Cantidad frac.</th>
                        <th style="border-right: solid #8C8C8C 1px;">Monto RD$</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        decimal totalQuantity = 0.0m; decimal totalMont = 0.0m;
                        decimal noallocateMont = 0.0m; decimal noallocateQuantity = 0.0m;
                        decimal houceMont = 0.0m; decimal houceQuantity = 0.0m;
                        decimal invoiceMont = 0.0m; decimal invoiceQuantity = 0.0m;
                        decimal noPayMont = 0.0m; decimal noPayQuantity = 0.0m;
                        decimal payMont = 0.0m; decimal payQuantity = 0.0m;

                        List<Tickets.Models.TicketAllocationNumber> ticketNumber = new List<Tickets.Models.TicketAllocationNumber>();
                        var numberByFraction = (from tn in context.TicketAllocationNumbers
                                                join a in context.TicketAllocations on tn.TicketAllocationId equals a.Id
                                                where a.RaffleId == Model.Id
                                                group tn by tn.Number into g
                                                select new
                                                {
                                                    number = g.Key,
                                                    ticketNumber = g,
                                                }).ToList();


                        var awards = context.Awards.Where(a => a.ProspectId == Model.TicketProspectId).Select(w => new
                        {
                            Quantity = w.Quantity,
                            Value = w.Value,
                            ByFraction = w.ByFraction,
                            Name = w.Name,
                            Id = w.Id
                        }).ToList();
                        var raffleAwards = context.RaffleAwards.Where(ra => ra.RaffleId == Model.Id).Select(ra => new
                        {
                            RaffleId = ra.RaffleId,
                            ControlNumber = ra.ControlNumber,
                            Fraction = ra.Fraction,
                            AwardId = ra.AwardId
                        }).ToList();
                        var raffleReturneds = context.TicketReturns.Where(t => t.RaffleId == Model.Id).Select(r => new
                        {
                            Number = r.TicketAllocationNumber.Number,
                            FractionFrom = r.FractionFrom,
                            FractionTo = r.FractionTo
                        }).ToList();
                        var identifyNumbers = (from ifn in context.IdentifyNumbers
                                               join tan in context.TicketAllocationNumbers on ifn.NumberId equals tan.Id
                                               join ifb in context.IdentifyBaches on ifn.IdentifyBachId equals ifb.Id
                                               where ifb.RaffleId == Model.Id
                                               select new
                                               {
                                                   Number = tan.Number,
                                                   FractionFrom = ifn.FractionFrom,
                                                   FractionTo = ifn.FractionTo
                                               }).ToList();
                    }
                    @foreach (var award in awards)
                    {
                        totalMont += award.Quantity * award.Value;

                        decimal houceM = 0.0m; decimal houceQ = 0.0m;
                        decimal invoiceM = 0.0m; decimal invoiceQ = 0.0m;
                        decimal noAllocateM = 0.0m; decimal noAllocateQ = 0.0m;
                        decimal noPayM = 0.0m; decimal noPayQ = 0.0m;
                        decimal payM = 0.0m; decimal payQ = 0.0m;

                        foreach (var a in raffleAwards.Where(r => r.AwardId == award.Id))
                        {
                            int prospectFraction = award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? 1 :
                                Model.TicketProspect.LeafFraction * Model.TicketProspect.LeafNumber;

                            int returnedInvoiceQuantity = 0;
                            decimal returnedInvoiceValue = 0;
                            int invoiceQuantityNumber = 0;
                            decimal invoiceValueNumber = 0;



                            var number = numberByFraction.FirstOrDefault(t => t.number == a.ControlNumber);


                            if (number == null)
                            {
                                noAllocateQ += prospectFraction;
                                noAllocateM += award.Value;
                            }
                            else
                            {

                                foreach (var tn in number.ticketNumber)
                                {
                                    var fraction = award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? 1 : (tn.FractionTo - tn.FractionFrom + 1);
                                    var value = award.Value / (award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? 1 : prospectFraction);
                                    if (tn.TicketAllocation.Statu == (int)Tickets.Models.Enums.AllocationStatuEnum.Invoiced)
                                    {

                                        if ((prospectFraction > 1))
                                        {
                                            invoiceQuantityNumber += fraction;
                                            invoiceValueNumber += fraction * value;

                                        }
                                        else
                                        {
                                            if ((a.Fraction >= tn.FractionFrom && a.Fraction <= tn.FractionTo))
                                            {
                                                invoiceQuantityNumber = fraction;
                                                invoiceValueNumber = fraction * value;
                                            }
                                        }

                                    }
                                    else if (tn.TicketAllocation.Statu == (int)Tickets.Models.Enums.AllocationStatuEnum.Printed)
                                    {
                                        if (prospectFraction > 1)
                                        {

                                            houceQ += fraction;
                                            houceM += fraction * value;

                                        }
                                        else
                                        {
                                            houceQ = fraction;
                                            houceM = fraction * value;

                                        }

                                    }
                                    else if (tn.TicketAllocation.Statu == (int)Tickets.Models.Enums.AllocationStatuEnum.Created || tn.TicketAllocation.Statu == (int)Tickets.Models.Enums.AllocationStatuEnum.PendientPrint || tn.TicketAllocation.Statu == (int)Tickets.Models.Enums.AllocationStatuEnum.Review)
                                    {
                                        if (prospectFraction > 1)
                                        {
                                            noAllocateQ += fraction;
                                            noAllocateM += fraction * value;
                                        }
                                        else
                                        {
                                            noAllocateQ = fraction;
                                            noAllocateM = fraction * value;
                                        }
                                    }

                                }

                                if (invoiceQuantityNumber != 0 /*&& (prospectFraction > (invoiceQuantityNumber + houceQ))*/)
                                {
                                    var Rvalue = award.Value / (award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? 1 : prospectFraction);
                                    noAllocateQ += prospectFraction - invoiceQuantityNumber;
                                    noAllocateM += (prospectFraction - invoiceQuantityNumber) * Rvalue;
                                }


                                var numberReturneds = raffleReturneds.Where(t => t.Number == number.number).ToList();
                                foreach (var returned in numberReturneds)
                                {
                                    if (award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S)
                                    {
                                        //houceQ += (returned.FractionFrom >= a.Fraction && returned.FractionTo <= a.Fraction) ? 1 : 0;
                                        //houceM += (returned.FractionFrom >= a.Fraction && returned.FractionTo <= a.Fraction) ? award.Value : 0;
                                        houceQ += (a.Fraction >= returned.FractionFrom && a.Fraction <= returned.FractionTo) ? 1 : 0;
                                        houceM += (a.Fraction >= returned.FractionFrom && a.Fraction <= returned.FractionTo) ? award.Value : 0;
                                    }
                                    else
                                    {
                                        houceQ += returned.FractionTo - returned.FractionFrom + 1;
                                        houceM += (returned.FractionTo - returned.FractionFrom + 1) * (award.Value / prospectFraction);

                                        returnedInvoiceQuantity += returned.FractionTo - returned.FractionFrom + 1;
                                        returnedInvoiceValue += (returned.FractionTo - returned.FractionFrom + 1) * (award.Value / prospectFraction);
                                    }



                                }
                                if ((prospectFraction == 1) && (houceM != 0))
                                {
                                    invoiceQuantityNumber = 0;
                                    invoiceValueNumber = 0;
                                }
                                else
                                {
                                    invoiceQuantityNumber -= returnedInvoiceQuantity;
                                    invoiceValueNumber -= returnedInvoiceValue;
                                }

                                var invoiceAwardQuantity = 0;
                                var invoiceAwardValue = 0.0m;
                                var identifyNumbersGrouped = identifyNumbers.Where(i => i.Number == number.number).GroupBy(i => i.FractionFrom).Select(i => new
                                {
                                    i.FirstOrDefault().FractionFrom,
                                    i.FirstOrDefault().FractionTo
                                }).ToList();

                                foreach (var identify in identifyNumbersGrouped)
                                {
                                    if (award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S)
                                    {
                                        invoiceAwardQuantity += (a.Fraction >= identify.FractionFrom && a.Fraction <= identify.FractionTo) ? 1 : 0;
                                        invoiceAwardValue += (a.Fraction >= identify.FractionFrom && a.Fraction <= identify.FractionTo) ? award.Value : 0;

                                    }
                                    else
                                    {
                                        invoiceAwardQuantity += (identify.FractionTo - identify.FractionFrom + 1);
                                        invoiceAwardValue += ((identify.FractionTo - identify.FractionFrom + 1) * (award.Value / prospectFraction));
                                    }
                                }


                                payQ += invoiceAwardQuantity;
                                payM += invoiceAwardValue;

                                noPayQ += (invoiceQuantityNumber - invoiceAwardQuantity);
                                noPayM += (invoiceValueNumber - invoiceAwardValue);

                                invoiceQ += invoiceQuantityNumber;
                                invoiceM += invoiceValueNumber;
                            }
                        }



                        houceMont += houceM;
                        houceQuantity += houceQ;

                        invoiceMont += invoiceM;
                        invoiceQuantity += invoiceQ;

                        noallocateQuantity += noAllocateQ;
                        noallocateMont += noAllocateM;

                        noPayQuantity += noPayQ;
                        noPayMont += noPayM;

                        payQuantity += payQ;
                        payMont += payM;




                        <tr class="t-r">

                            <td style="text-align:left; border-right: solid #8C8C8C 1px;">@award.Name</td>

                            @{
                                int frac = award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? 1 : Model.TicketProspect.LeafFraction * Model.TicketProspect.LeafNumber;

                                totalQuantity += (frac * award.Quantity);
                            }

                            <td>@((frac * award.Quantity).ToString("N0", new System.Globalization.CultureInfo("es-DO")))</td>
                            <td style="border-right: solid #8C8C8C 1px;">@award.Value.ToString("n", new System.Globalization.CultureInfo("es-DO"))</td>

                            <td>@houceQ.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                            <td style="border-right: solid #8C8C8C 1px;">@houceM.ToString("n", new System.Globalization.CultureInfo("es-DO"))</td>

                            <td>@invoiceQ.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                            <td style="border-right: solid #8C8C8C 1px;">@invoiceM.ToString("n", new System.Globalization.CultureInfo("es-DO"))</td>

                            <td>@noAllocateQ.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                            <td style="border-right: solid #8C8C8C 1px;">@noAllocateM.ToString("n", new System.Globalization.CultureInfo("es-DO"))</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="total">
                        <td></td>
                        <td class="text-right">@totalQuantity.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                        <td class="text-right">@totalMont.ToString("N", new System.Globalization.CultureInfo("es-DO"))</td>

                        <td class="text-right">@houceQuantity.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                        <td class="text-right">@houceMont.ToString("N", new System.Globalization.CultureInfo("es-DO"))</td>

                        <td class="text-right">@invoiceQuantity.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                        <td class="text-right">@invoiceMont.ToString("N", new System.Globalization.CultureInfo("es-DO"))</td>

                        <td class="text-right">@noallocateQuantity.ToString("N0", new System.Globalization.CultureInfo("es-DO"))</td>
                        <td class="text-right">@noallocateMont.ToString("N", new System.Globalization.CultureInfo("es-DO"))</td>

                    </tr>
                </tfoot>
            </table>

        </div>

        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <b>@adminName</b><br />
            <span>@adminCargo</span>
        </div>
    </div>*@
