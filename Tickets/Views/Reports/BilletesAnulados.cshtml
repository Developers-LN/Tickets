@model IEnumerable<Tickets.Models.TicketAllocationNumber>

@{
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "BILLETES ANULADOS DEL SORTEO " + Model.FirstOrDefault().TicketAllocation.Raffle.Symbol + Model.FirstOrDefault().TicketAllocation.Raffle.Separator + Model.FirstOrDefault().TicketAllocation.Raffle.SequenceNumber;

    var context = new Tickets.Models.TicketsEntities();
    var config = context.SystemConfigs.FirstOrDefault();
    string adminName = config != null ? config.Comercial : "";
    string adminCargo = config != null ? config.ComercialCargo : "";

    int raffleid = Model.FirstOrDefault().RaffleId.Value;
    var RaffleData = context.Raffles.Where(w => w.Id == raffleid).FirstOrDefault();

    int TotalNullTickets = 0;

    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("es-ES");
}

<div class="col-lg-12 col-md-12 col-sm-12">
    <div class="col-lg-12 col-md-12 col-sm-12 text-center">
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <img style="height:65px; width:auto; margin-bottom:5px;" src="~/Images/logo.png" />
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <b>REPUBLICA DOMINICANA</b><br />
            <b>MINISTERIO DE HACIENDA</b><br />
            <b>ADMINISTRACION LOTERIA NACIONAL</b><br />
            FECHA DEL SORTEO: @RaffleData.DateSolteo.ToLongDateString()
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <b>
                NUMEROS ANULADOS EN EL SORTEO <br />
                @RaffleData.Symbol @RaffleData.Separator @RaffleData.SequenceNumber @RaffleData.Name
            </b><br />
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-right">
            <b>FECHA: </b> @DateTime.Now.ToString("dd/MM/yyyy") <br />
            <b>HORA: </b> @DateTime.Now.ToString("hh:mm:ss tt")
        </div>
    </div>
    <div class="col-lg-12 col-md-12 no-padder col-sm-12">
        <table class="table">
            <tbody>
                @if (Model.Any() == true)
                {
                    var ClientList = Model.GroupBy(g => new
                    {
                        Id = g.TicketAllocation.Client.Id,
                        Name = g.TicketAllocation.Client.Name
                    }).Select(s => new
                    {
                        s.Key.Id,
                        s.Key.Name
                    }).ToList();

                    if (RaffleData.Prospect.LeafNumber * RaffleData.Prospect.LeafFraction == 1)
                    {
                        foreach (var client in ClientList)
                        {
                            int line = 1;
                            int forIndex = 0;
                            int NumberCount = 0;
                            int ColumnCount = 0;
                            var Billetes = Model.Where(w => w.TicketAllocation.ClientId == client.Id).Select(s => new { s.Number, s.FractionFrom, s.FractionTo }).OrderBy(o => o.Number).ToArray();
                            var TotalNumbers = Billetes.Count();
                            var LimitRow = TotalNumbers / 9;
                            TotalNullTickets += TotalNumbers;
                            <tr class="row-header" style="font-weight:bold">
                                <th colspan="10" class="text-center">
                                    @client.Id - @client.Name
                                </th>
                            </tr>
                            <tr>
                                <th class="text-center">FILA</th>
                                <th class="text-center">COL 1</th>
                                <th class="text-center">COL 2</th>
                                <th class="text-center">COL 3</th>
                                <th class="text-center">COL 4</th>
                                <th class="text-center">COL 5</th>
                                <th class="text-center">COL 6</th>
                                <th class="text-center">COL 7</th>
                                <th class="text-center">COL 8</th>
                                <th class="text-center">COL 9</th>
                            </tr>
                            while (NumberCount <= LimitRow)
                            {
                                ColumnCount = 1;
                                <tr>
                                    <td class="text-center" style="color:red; font-weight:bold; font-size:12pt;">@line</td>
                                    @while (ColumnCount <= 9)
                                    {
                                        if (forIndex <= (TotalNumbers - 1))
                                        {
                                            <td class="text-center">@(Billetes[forIndex].Number.ToString().PadLeft((RaffleData.Prospect.Production - 1).ToString().Length, '0'))</td>
                                            forIndex++;
                                        }
                                        ColumnCount++;
                                    }
                                </tr>
                                line++;
                                NumberCount++;
                            }
                            <tr class="row-footer" style="font-weight:bold">
                                <td class="text-right" colspan="9">BILLETES ANULADOS: </td>
                                <td class="text-center">@TotalNumbers</td>
                            </tr>
                        }
                    }
                    else
                    {
                        foreach (var client in ClientList)
                        {
                            int line = 1;
                            int forIndex = 0;
                            int NumberCount = 0;
                            int ColumnCount = 0;
                            var Billetes = Model.Where(w => w.TicketAllocation.ClientId == client.Id).Select(s => new { s.Number, s.FractionFrom, s.FractionTo }).OrderBy(o => o.Number).ToArray();
                            var TotalNumbers = Billetes.Count();
                            var LimitRow = TotalNumbers / 9;
                            var TotalFractions = Model.Where(W => W.TicketAllocation.ClientId == client.Id).Sum(s => s.FractionTo - s.FractionFrom + 1);
                            <tr class="row-header" style="font-weight:bold">
                                <th colspan="10" class="text-center">
                                    @client.Id - @client.Name
                                </th>
                            </tr>
                            <tr>
                                <th class="text-center">FILA</th>
                                <th class="text-center">COL 1</th>
                                <th class="text-center">COL 2</th>
                                <th class="text-center">COL 3</th>
                                <th class="text-center">COL 4</th>
                                <th class="text-center">COL 5</th>
                                <th class="text-center">COL 6</th>
                                <th class="text-center">COL 7</th>
                                <th class="text-center">COL 8</th>
                                <th class="text-center">COL 9</th>
                            </tr>
                            while (NumberCount <= LimitRow)
                            {
                                ColumnCount = 1;
                                <tr>
                                    <td class="text-center" style="color:red; font-weight:bold; font-size:12pt;">@line</td>
                                    @while (ColumnCount <= 9)
                                    {
                                        if (forIndex <= (TotalNumbers - 1))
                                        {
                                            <td class="text-center">@(Billetes[forIndex].Number.ToString().PadLeft((RaffleData.Prospect.Production - 1).ToString().Length, '0')) | @(Billetes[forIndex].FractionFrom + " - " + Billetes[forIndex].FractionTo)</td>
                                            forIndex++;
                                        }
                                        ColumnCount++;
                                    }
                                </tr>
                                line++;
                                NumberCount++;
                            }
                            var totalbilletes = TotalFractions / (RaffleData.Prospect.LeafFraction * RaffleData.Prospect.LeafNumber);
                            var totalfracciones = TotalFractions % (RaffleData.Prospect.LeafFraction * RaffleData.Prospect.LeafNumber);

                            <tr class="row-footer" style="font-weight:bold">
                                <td class="text-right" colspan="10">TOTAL DE FRACCIONES ANULADAS: @TotalFractions, EQUIVALENTES A @totalbilletes BILLETES@((totalfracciones > 0 ? " Y " + totalfracciones.ToString() + " FRACCIONES." : ".")) </td>
                            </tr>

                            @*
                            <tr class="row-footer" style="font-weight:bold">
                                <td class="text-right" colspan="9">BILLETES ANULADOS: </td>
                                <td class="text-center">@(TotalFractions / (RaffleData.Prospect.LeafFraction * RaffleData.Prospect.LeafNumber))</td>
                            </tr>
                            <tr class="row-footer" style="font-weight:bold">
                                <td class="text-right" colspan="9">FRACCIONES ANULADAS: </td>
                                <td class="text-center">@(TotalFractions % (RaffleData.Prospect.LeafFraction * RaffleData.Prospect.LeafNumber))</td>
                            </tr>
                            *@
                        }
                    }
                }
                else
                {
                    <tr>
                        <td colspan="10" class="text-center">
                            ESTE SORTEO NO TUVO VENTAS
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
        @if (RaffleData.Prospect.LeafNumber * RaffleData.Prospect.LeafFraction == 1)
        {
            <b>TOTAL DE BILLETES ANULADOS: @TotalNullTickets.ToString("n0", new System.Globalization.CultureInfo("es-DO"))</b>
        }
        else
        {
            var TotalFractions = Model.Sum(s => s.FractionTo - s.FractionFrom + 1);
            var Billetes = TotalFractions / (RaffleData.Prospect.LeafFraction * RaffleData.Prospect.LeafNumber);
            var FraccionesRestantes = TotalFractions % (RaffleData.Prospect.LeafFraction * RaffleData.Prospect.LeafNumber);
            <b>TOTAL BILLETES ANULADOS: @Billetes.ToString("n0", new System.Globalization.CultureInfo("es-DO"))</b>
            <br />
            if (FraccionesRestantes > 0)
            {
                <b>TOTAL FRACCIONES ANULADAS: @FraccionesRestantes</b>
            }
        }
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
        <b>@adminName</b><br />
        <span>@adminCargo</span><br />
        <p>NOTA: Este reporte contiene los números que han sido anulados en el sorteo @RaffleData.Symbol @RaffleData.Separator @RaffleData.SequenceNumber, encontrándose posicionado a la izquierda del punto el número de billete y a la derecha la fracción devuelta</p>
    </div>
</div>
