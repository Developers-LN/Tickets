@model IEnumerable<Tickets.Models.Raffle>

@{
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "";

    var context = new Tickets.Models.TicketsEntities();
    var config = context.SystemConfigs.FirstOrDefault();
    string adminName = config != null ? config.LoteryAdmin : "";
    string adminCargo = config != null ? config.Cargo : "";

    var menor = Model.Min(m => m.Id);
    var mayor = Model.Max(m => m.Id);

    var ticketReturn = context.TicketReturns
                    .Join(context.TicketAllocationNumbers,
                    tr => tr.TicketAllocationNimberId,
                    ta => ta.Id,
                    (tr, ta) => new
                    {
                        ta.RaffleId,
                        ta.Number
                    })
                    .Where(r => r.RaffleId >= menor && r.RaffleId <= mayor);

    var ticketAllocationNumbers = context.TicketAllocationNumbers.Where(r => r.RaffleId >= menor && r.RaffleId <= mayor)
                     .Select(s => new
                     {
                         s.Number,
                         s.RaffleId,
                         s.Statu
                     });

    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("es-DO");
}

<style>
    .col-lg-12 {
        width: 100%;
        float: left;
    }

    .col-lg-4 {
        width: 33.333%;
        float: left;
    }

    .col-lg-6 {
        width: 50%;
        float: left;
    }

    .text-center {
        text-align: center;
    }

    .text-right {
        text-align: right;
    }

    .text-left {
        text-align: left;
    }

    .no-padder {
        padding-left: 5px;
        padding-right: 5px;
    }
</style>

<div class="col-lg-12">
    <div class="col-lg-12 no-padder text-center">
        <div class="col-lg-12 no-padder text-center" style="margin-top: 50px;">
            <img src="~/Images/logo.png" />
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>MINISTERIO DE HACIENDA</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>ADMINISTRACION DE LA LOTERIA NACIONAL</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>REPORTE DE LOS SORTEOS ENTRE @ViewBag.StartDate Y @ViewBag.EndDate</b>
        </div>
    </div>
    <div class="col-lg-12 no-padder">
        <div class="col-lg-6 no-padder text-left">
        </div>
        <div class="col-lg-6 no-padder text-right">
            <b>Fecha: </b> @DateTime.Now.ToShortDateString() <br />
            <b>Hora: </b> @DateTime.Now.ToShortTimeString() <br />
        </div>
    </div>
    <div>
        <div class="col-lg-12 no-padder">
            <table class="table">
                <thead>
                    <tr>
                        <th colspan="4"></th>
                        <th colspan="3" class="text-center">Ganadores</th>
                    </tr>
                    <tr>
                        <th class="text-center">Sorteo</th>
                        <th class="text-center">Fecha del sorteo</th>
                        <th class="text-right">Venta bruta</th>
                        <th class="text-right">Venta efectiva</th>
                        <th class="text-center">1<sup>ro</sup></th>
                        <th class="text-center">2<sup>do</sup></th>
                        <th class="text-center">3<sup>ro</sup></th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        decimal totalGeneralInvoice = 0.0m;
                        decimal totalGeneralDiscount = 0.0m;
                        decimal totalGeneralReturnedPayments = 0.0m;
                        decimal totalGeneralPayment = 0.0m;
                        decimal totalGeneralCredit = 0.0m;
                        decimal totalGeneralOther = 0.0m;
                        decimal totalGeneralRest = 0.0m;
                    }

                    @foreach (var raffle in Model)
                    {
                        decimal totalInvoice = 0.0m;
                        decimal totalDiscount = 0.0m;
                        decimal totalReturnedPayments = 0.0m;
                        decimal totalRest = 0.0m;
                        decimal totalPayment = 0.0m;
                        decimal totalCredit = 0.0m;
                        decimal totalOther = 0.0m;

                        var raffleName = raffle.Id + "-" + raffle.Name;
                        var raffleDate = raffle.DateSolteo.ToShortDateString();

                        var raffleAwards = raffle.RaffleAwards.Where(a => a.RaffleId == raffle.Id).OrderBy(o => o.Award.Id)
                                                 .Select(s => new
                                                 {
                                                     controlNumber = s.ControlNumber,
                                                     status =
                                                     (ticketAllocationNumbers.Where(w => w.RaffleId == raffle.Id && w.Number == s.ControlNumber).Select(se => se.Statu).Contains(61) ? "NF" :
                                                     ticketReturn.Where(w => w.RaffleId == raffle.Id).Select(sr => sr.Number).Contains(s.ControlNumber) ? "D" :
                                                     !ticketAllocationNumbers.Where(w => w.RaffleId == raffle.Id).Select(stan => stan.Number).Contains(s.ControlNumber) ? "NA" :
                                                     "C")
                                                 }).Take(3).ToList();

                        var invoices = raffle.Invoices.Where(i => i.PaymentStatu != (int)Tickets.Models.Enums.InvoicePaymentStatuEnum.Suspended).AsEnumerable()
                            .GroupBy(g => g.RaffleId)
                            .Select(i => new
                            {
                                raffleName = i.FirstOrDefault().Raffle.Id + "-" + i.FirstOrDefault().Raffle.Name,
                                raffleDate = i.FirstOrDefault().Raffle.DateSolteo.ToShortDateString(),

                                invoiceValue = i.Select(iv => iv.InvoiceTickets.Select(it => it.Quantity * it.PricePerFraction).Aggregate((x, y) => x + y)).Aggregate((x, y) => x + y),

                                discountValue = i.Select(iv => (iv.Discount * iv.InvoiceTickets.Select(it => it.Quantity * it.PricePerFraction).Aggregate((x, y) => x + y)) / 100).Aggregate((x, y) => x + y),

                                returnedValue = i.Select(p => p.ReceiptPayments.Select(rp => rp.NoteCreditReceiptPayments.Where(nc => nc.NoteCredit.RaffleId.HasValue)
                                                 .Select(nc => nc.TotalCash).Sum()).Sum()).Sum(),

                            }).ToList();

                        if (invoices.Count != 0)
                        {
                            foreach (var client in invoices)
                            {
                                var restant = client.invoiceValue - (client.returnedValue + client.discountValue /*+ client.paymentValue + client.paymentIdentify + client.otherPayment*/);

                                <tr>
                                    <td class="text-left">@client.raffleName</td>
                                    <td class="text-center">@client.raffleDate</td>
                                    <td class="text-right">@((client.invoiceValue).ToString("c", new System.Globalization.CultureInfo("es-DO")))</td>
                                    <td class="text-right">@((restant).ToString("c", new System.Globalization.CultureInfo("es-DO")))</td>
                                    <td class="text-center">@((string)(raffleAwards.Count > 0 ? raffleAwards[0].controlNumber+"-"+raffleAwards[0].status : "N/A"))</td>
                                    <td class="text-center">@((string)(raffleAwards.Count > 0 ? raffleAwards[1].controlNumber+"-"+raffleAwards[1].status : "N/A"))</td>
                                    <td class="text-center">@((string)(raffleAwards.Count > 0 ? raffleAwards[2].controlNumber+"-"+raffleAwards[2].status : "N/A"))</td>
                                </tr>

                                totalInvoice += client.invoiceValue;
                                totalReturnedPayments += client.returnedValue;
                                totalRest += restant;
                            }
                        }
                        else
                        {
                            <tr>
                                <td class="text-left">@raffleName</td>
                                <td class="text-center">@raffleDate</td>
                                <td class="text-right">0</td>
                                <td class="text-right">0</td>
                                <td class="text-center">@((string)(raffleAwards.Count > 0 ? raffleAwards[0].controlNumber+"-"+raffleAwards[0].status : "N/A"))</td>
                                <td class="text-center">@((string)(raffleAwards.Count > 0 ? raffleAwards[1].controlNumber+"-"+raffleAwards[1].status : "N/A"))</td>
                                <td class="text-center">@((string)(raffleAwards.Count > 0 ? raffleAwards[2].controlNumber+"-"+raffleAwards[2].status : "N/A"))</td>
                            </tr>
                        }

                        totalGeneralInvoice += totalInvoice;
                        totalGeneralDiscount += totalDiscount;
                        totalGeneralReturnedPayments += totalReturnedPayments;
                        totalGeneralPayment += totalPayment;
                        totalGeneralCredit += totalCredit;
                        totalGeneralOther += totalOther;
                        totalGeneralRest += totalRest;
                    }
                </tbody>
                <tfoot>
                    <tr class="total" style="font-weight:bold">
                        <td colspan="2" class="text-right">Total General...:</td>
                        <td class="text-right">@(totalGeneralInvoice.ToString("c", new System.Globalization.CultureInfo("es-DO")))</td>
                        <td class="text-right">@(totalGeneralRest.ToString("c", new System.Globalization.CultureInfo("es-DO")))</td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
        <p>NOTA: Los números ganadores terminados en "C" son aquellos que están en la calle, los que terminan en "D" son los ganadores que fueron devueltos, los que terminan en “NF” son aquellos que no fueron facturados y los que terminan en "NA" son los que no están asignados</p>
        <b>Vicente Paulino Rosario</b><br />
        <span>Asesor</span>
    </div>
</div>
