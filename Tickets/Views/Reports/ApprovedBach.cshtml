@model Tickets.Models.IdentifyBach
@using Tickets.Models.Enums
@{
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "APROBACION DE PAGO A PREMIO DEL LOTE NO. " + Model.SequenceNumber + " DEL SORTEO NO. " + Model.Raffle.Symbol + Model.Raffle.Separator + Model.Raffle.SequenceNumber;

    var context = new Tickets.Models.TicketsEntities();
    var config = context.SystemConfigs.FirstOrDefault();
    string adminName = config != null ? config.ControlPremio : "";
    string adminCargo = config != null ? config.ControlPremioCargo : "";
    var raffleAwards = context.Raffles.FirstOrDefault(r => r.Id == Model.RaffleId).RaffleAwards.ToList();
    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("es-ES");
    var LawDiscount = context.SystemConfigs.FirstOrDefault().LawDiscountPercentMayor;
}

<style>
    .col-lg-12 {
        width: 100%;
        float: left;
    }

    .col-lg-4 {
        width: 33.333%;
        float: left;
    }

    .col-lg-6 {
        width: 50%;
        float: left;
    }

    .text-center {
        text-align: center;
    }

    .text-right {
        text-align: right;
    }

    .text-left {
        text-align: left;
    }

    .no-padder {
        padding-left: 0px;
        padding-right: 0px;
    }
</style>

<div class="col-lg-12">
    <div class="col-lg-12 no-padder text-center">
        <div class="col-lg-12 no-padder text-center" style="margin-top: 50px;">
            <img style="height:65px; width:auto; margin-bottom:5px;" src="~/Images/logo.png" />
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>MINISTERIO DE HACIENDA</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>ADMINISTRACION DE LA LOTERIA NACIONAL</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>
                AUTORIZACION DE PAGO DE PREMIO DEL SORTEO <br />
                @Model.Raffle.Symbol @Model.Raffle.Separator @Model.Raffle.SequenceNumber @Model.Raffle.Name @Model.Raffle.DateSolteo.ToString("dd/MM/yyyy")
            </b>
        </div>
    </div>
    <div class="col-lg-12 no-padder">
        <br />
        <br />
        <div class="col-lg-6 no-padder text-left">
            <b>NOMBRE DEL GANADOR: </b> @Model.Winner.WinnerName<br />
            <b>DOCUMENTO: </b> @Model.Winner.DocumentNumber<br />
            <b>TELEFONO: </b> @Model.Winner.Phone<br />
        </div>
        <div class="col-lg-6 no-padder text-right">
            <b>LOTE: </b> @Model.SequenceNumber<br />
            <b>FECHA: </b> @Model.CreateDate.ToString("dd/MM/yyyy") <br />
            <b>HORA: </b> @Model.CreateDate.ToString("hh:mm:ss tt") <br />
        </div>
    </div>
    <div>
        <div class="col-lg-12 no-padder">
            <table class="table">
                <thead>
                    <tr>
                        <th class="text-center">NUMERO</th>
                        <th class="text-center">PREMIO</th>
                        <th class="text-center">DESDE-HASTA</th>
                        <th class="text-center">CANT. FRAC.</th>
                        <th class="text-right">VALOR FRAC.</th>
                        <th class="text-center">DESC.</th>
                        <th class="text-center">RETEN.</th>
                        <th class="text-right">TOTAL RETEN.</th>
                        <th class="text-right">TOTAL PAGAR</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int TotalFraction = 0;
                        decimal TotalGeneral = 0;
                        decimal TotalRetentionGeneral = 0;

                        var totalFraction2 = Model.IdentifyNumbers
                        .Select(s => new
                        {
                            s.NumberId,
                            total = s.FractionTo - s.FractionFrom + 1,
                            s.FractionFrom,
                            s.FractionTo
                        }).Distinct().ToList();
                        TotalFraction = totalFraction2.Sum(s => s.total);
                    }

                    @if (Model.IdentifyType == (int)Tickets.Models.Enums.IdentifyBachTypeEnum.Gamers)
                    {
                        foreach (var number in Model.IdentifyNumbers.Where(w => w.IdentifyBachNumberType == (int)Tickets.Models.Enums.IdentifyBachNumberTypeEnum.Gamer))
                        {
                            var raffleAwardList = raffleAwards.Where(rw => rw.ControlNumber == number.TicketAllocationNumber.Number
                            && number.TicketAllocationNumber.Id == number.NumberId
                            && rw.Award.TypesAward.Creation != (int)Tickets.Models.Enums.TypesAwardCreationEnum.SameAwardDerived).ToList();

                            bool wfrac = true;
                            var fFrom = number.FractionFrom;
                            var fTo = number.FractionTo;
                            foreach (var a in raffleAwardList.Where(w => w.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S))
                            {
                                for (int i = fFrom; i <= fTo; i++)
                                {
                                    if (i == a.Fraction)
                                    {
                                        wfrac = true;
                                        break;
                                    }
                                    else
                                    {
                                        wfrac = false;
                                    }
                                }
                            }
                            if (wfrac == false)
                            {
                                raffleAwardList.RemoveAll(w => w.ControlNumber == number.TicketAllocationNumber.Number && w.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S);
                            }

                            foreach (var raffleAward in raffleAwardList)
                            {
                                var ValuePerFracction = raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber) * (number.FractionTo - number.FractionFrom + 1);
                                var TotalToPay = raffleAward.Award.ByFraction == (int)ByFractionEnum.S || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.Mayors ? (raffleAward.Award.ByFraction == (int)ByFractionEnum.S ? raffleAward.Award.Value * ((decimal)LawDiscount / 100) : (raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber) * (number.FractionTo - number.FractionFrom + 1)) * (1 - (decimal)LawDiscount / 100)) : (raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber));
                                var Discount = raffleAward.Award.ByFraction == (int)ByFractionEnum.S || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.Mayors ? LawDiscount : 0;
                                var Retention = (raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AdditionalAwardInNature || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AutomaticAwardInNature) && raffleAward.Award.Value > 100000 ? LawDiscount : 0;
                                var TotalRetention = (raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AdditionalAwardInNature || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AutomaticAwardInNature) && raffleAward.Award.Value > 100000 ? (raffleAward.Award.Value * (decimal)LawDiscount / 100) : 0;

                                if (raffleAward.Award.TypesAward.Id == (int)Tickets.Models.Enums.AwardTypeEnum.WinFraction)
                                {
                                    TotalToPay = raffleAward.Award.Value;
                                    //totalFraction += 1;
                                    <tr>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft((Model.Raffle.Prospect.Production - 1).ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@number.FractionFrom - @number.FractionTo</td>
                                        <td class="text-center">1</td>
                                        <td class="text-right">@ValuePerFracction.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@Discount %</td>
                                        <td class="text-center">@Retention %</td>
                                        <td class="text-right">@TotalRetention.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@TotalToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                }
                                else
                                {
                                    //totalFraction += (number.FractionTo - number.FractionFrom + 1);
                                    <tr>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft((Model.Raffle.Prospect.Production - 1).ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@number.FractionFrom - @number.FractionTo</td>
                                        <td class="text-center">@(number.FractionTo - number.FractionFrom + 1)</td>
                                        <td class="text-right">@ValuePerFracction.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@Discount %</td>
                                        <td class="text-center">@Retention %</td>
                                        <td class="text-right">@TotalRetention.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@TotalToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                }
                                TotalGeneral += TotalToPay;
                                TotalRetentionGeneral += TotalRetention;
                            }
                        }
                    }
                    else
                    {
                        foreach (var number in Model.IdentifyNumbers.Where(w => w.IdentifyBachNumberType == (int)Tickets.Models.Enums.IdentifyBachNumberTypeEnum.Seller))
                        {
                            var raffleAwardList = raffleAwards.Where(rw => rw.ControlNumber == number.TicketAllocationNumber.Number
                            && number.TicketAllocationNumber.Id == number.NumberId
                            && rw.Award.TypesAward.Creation == (int)Tickets.Models.Enums.TypesAwardCreationEnum.SameAwardDerived).ToList();

                            bool wfrac = true;
                            var fFrom = number.FractionFrom;
                            var fTo = number.FractionTo;
                            foreach (var a in raffleAwardList.Where(w => w.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S))
                            {
                                for (int i = fFrom; i <= fTo; i++)
                                {
                                    if (i == a.Fraction)
                                    {
                                        wfrac = true;
                                        break;
                                    }
                                    else
                                    {
                                        wfrac = false;
                                    }
                                }
                            }
                            if (wfrac == false)
                            {
                                raffleAwardList.RemoveAll(w => w.ControlNumber == number.TicketAllocationNumber.Number && w.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S);
                            }

                            foreach (var raffleAward in raffleAwardList)
                            {
                                var ValuePerFracction = raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber) * (number.FractionTo - number.FractionFrom + 1);
                                var TotalToPay = raffleAward.Award.ByFraction == (int)ByFractionEnum.S || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.Mayors ? (raffleAward.Award.ByFraction == (int)ByFractionEnum.S ? raffleAward.Award.Value * ((decimal)LawDiscount / 100) : (raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber) * (number.FractionTo - number.FractionFrom + 1)) * (1 - (decimal)LawDiscount / 100)) : (raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber));
                                var Discount = raffleAward.Award.ByFraction == (int)ByFractionEnum.S || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.Mayors ? LawDiscount : 0;
                                var Retention = (raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AdditionalAwardInNature || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AutomaticAwardInNature) && raffleAward.Award.Value > 100000 ? LawDiscount : 0;
                                var TotalRetention = (raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AdditionalAwardInNature || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AutomaticAwardInNature) && raffleAward.Award.Value > 100000 ? (raffleAward.Award.Value * (decimal)LawDiscount / 100) : 0;

                                if (raffleAward.Award.TypesAward.Id == (int)Tickets.Models.Enums.AwardTypeEnum.WinFraction)
                                {
                                    TotalToPay = raffleAward.Award.Value;
                                    //totalFraction += 1;
                                    <tr>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft((Model.Raffle.Prospect.Production - 1).ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@number.FractionFrom - @number.FractionTo</td>
                                        <td class="text-center">1</td>
                                        <td class="text-right">@ValuePerFracction.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@Discount %</td>
                                        <td class="text-center">@Retention %</td>
                                        <td class="text-right">@TotalRetention.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@TotalToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                }
                                else
                                {
                                    //totalFraction += (number.FractionTo - number.FractionFrom + 1);
                                    <tr>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft((Model.Raffle.Prospect.Production - 1).ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@number.FractionFrom - @number.FractionTo</td>
                                        <td class="text-center">@(number.FractionTo - number.FractionFrom + 1)</td>
                                        <td class="text-right">@ValuePerFracction.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@Discount %</td>
                                        <td class="text-center">@Retention %</td>
                                        <td class="text-right">@TotalRetention.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@TotalToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                }
                                TotalGeneral += TotalToPay;
                                TotalRetentionGeneral += TotalRetention;
                            }
                        }
                    }
                    <tr class="total">
                        <td></td>
                        <td></td>
                        <td></td>
                        <td class="text-center"><strong>@TotalFraction</strong></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td class="text-right" colspan="2">
                            <br />
                            Subtotal a pagar: <strong> @((TotalGeneral).ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong>
                            <br />
                            <br />
                            Total a retener: <strong> @((TotalRetentionGeneral).ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="col-lg-12 no-padder text-center">
    <br />
    <br />
    <div class="col-lg-4 col-md-6 col-sm-6 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Personal de caja
    </div>
    <div class="col-lg-4 col-md-6 col-sm-6 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Firma del ganador
    </div>
    <div class="col-lg-4 col-md-6 col-sm-6 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Encargado de identificación
    </div>
    <br />
    <br />
    <br />
    <br />
</div>
<div class="col-lg-12 no-padder text-center">
    <b>@adminName</b>
</div>
<div class="col-lg-12 no-padder text-center">
    <span>@adminCargo</span>
</div>
