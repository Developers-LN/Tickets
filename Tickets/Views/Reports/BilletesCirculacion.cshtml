@model IEnumerable<Tickets.Models.ModelsProcedures.ModelAvailableTickets>

@{
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "Billetes en circulación";

    var context = new Tickets.Models.TicketsEntities();
    var config = context.SystemConfigs.FirstOrDefault();
    string adminName = config != null ? config.ProduccionSorteo : "";
    string adminCargo = config != null ? config.ProduccionSorteoCargo : "";

    int raffleid = Model.Select(s => s.RaffleId).FirstOrDefault();
    var RaffleData = context.Raffles.Where(w => w.Id == raffleid).FirstOrDefault();

    int TicketsCount = 0;
    int FractionCount = 0;
    int Fracciones = 0;
    var TicketFractions = 0;

    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("es-ES");
}

<div class="col-lg-12 col-md-12 col-sm-12">
    <div class="col-lg-12 col-md-12 col-sm-12 text-center">
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <img src="~/Images/logo.png" />
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <b>REPUBLICA DOMINICANA</b><br />
            <b>MINISTERIO DE HACIENDA</b><br />
            <b>ADMINISTRACION LOTERIA NACIONAL</b><br />
            Fecha del sorteo: @RaffleData.DateSolteo.ToLongDateString()
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
            <b>NUMEROS EN CIRCULACION DEL SORTEO NO. @RaffleData.Id</b><br />
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-right">
            <b>Fecha: </b> @DateTime.Now.ToShortDateString() <br />
            <b>Hora: </b> @DateTime.Now.ToShortTimeString()
        </div>
    </div>
    <div class="col-lg-12 col-md-12 no-padder col-sm-12">
        <table class="table">
            <thead>
                <tr>
                    <th colspan="10" class="text-center">@RaffleData.Name</th>
                </tr>
                <tr>
                    <th class="text-center">FILA</th>
                    <th class="text-center">COL 1</th>
                    <th class="text-center">COL 2</th>
                    <th class="text-center">COL 3</th>
                    <th class="text-center">COL 4</th>
                    <th class="text-center">COL 5</th>
                    <th class="text-center">COL 6</th>
                    <th class="text-center">COL 7</th>
                    <th class="text-center">COL 8</th>
                    <th class="text-center">COL 9</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Any(a => a.Data) == true)
                {
                    if (RaffleData.Prospect.LeafNumber * RaffleData.Prospect.LeafFraction == 1)
                    {
                        TicketFractions = RaffleData.Prospect.LeafNumber * RaffleData.Prospect.LeafFraction;

                        HashSet<int> Billetes = new HashSet<int>();
                        Model.ToList().ForEach(f => Billetes.Add(f.Number));

                        var numberCount = -1;
                        var production = RaffleData.Prospect.Production - 1;
                        var NextBiggerNumber = 0;
                        int line = 1;
                        TicketsCount = Model.Count();
                        var MaxNumber = Model.Max(n => n.Number);
                        int inicio = 0, fin = 0;
                        string stringNumber, newStringNumber, stringNumberI, stringNumberF, newStringNumberS;

                        while (numberCount <= MaxNumber)
                        {
                            int countTen = 1;
                            <tr>
                                <td class="text-center" style="color:red; font-weight:bold; font-size:12pt;">@line</td>
                                @while (countTen <= 9 && numberCount <= MaxNumber)
                                {
                                    NextBiggerNumber = Billetes.FirstOrDefault(f => f > numberCount);
                                    numberCount = NextBiggerNumber;
                                    if (Model.Where(n => n.Number == numberCount).Any())
                                    {
                                        countTen++;

                                        if (Model.Where(n => n.Number == (numberCount + 1)).Any())
                                        {
                                            inicio = (int)numberCount;
                                            numberCount++;
                                            while (Model.Where(n => n.Number == numberCount).Any())
                                            {
                                                fin = (int)numberCount++;
                                            }
                                            stringNumberI = inicio.ToString();
                                            stringNumberF = fin.ToString();
                                            newStringNumberS = (stringNumberI.PadLeft(production.ToString().Length, '0') + " - " + stringNumberF.PadLeft(production.ToString().Length, '0'));

                                            <td class="text-center">@newStringNumberS</td>
                                        }
                                        else
                                        {
                                            stringNumber = numberCount.ToString();
                                            newStringNumber = stringNumber.PadLeft(production.ToString().Length, '0');
                                            <td class="text-center">@newStringNumber</td>
                                        }
                                        if (numberCount == MaxNumber)
                                        {
                                            numberCount++;
                                        }
                                    }
                                }
                            </tr>
                            line += 1;
                        }
                    }
                    else
                    {
                        HashSet<int> Billetes = new HashSet<int>();
                        Model.ToList().ForEach(f => Billetes.Add(f.Number));

                        var numberCount = -1;
                        var production = RaffleData.Prospect.Production - 1;
                        var NextBiggerNumber = 0;
                        int line = 1;
                        Fracciones = RaffleData.Prospect.LeafNumber * RaffleData.Prospect.LeafFraction;
                        FractionCount = Model.Sum(s => s.AvailableFractions);
                        var MaxNumber = Model.Max(n => n.Number);
                        int inicio = 0, fin = 0, CantidadFraccion = 0, LastFaction = 0;
                        string stringNumber, newStringNumber, stringNumberI, stringNumberF, newStringNumberS;

                        while (numberCount <= MaxNumber)
                        {
                            int countTen = 1;
                            <tr>
                                <td class="text-center" style="color:red; font-weight:bold; font-size:12pt;">@line</td>
                                @while (countTen <= 9 && numberCount <= MaxNumber)
                                {
                                    NextBiggerNumber = Billetes.FirstOrDefault(f => f > numberCount);
                                    numberCount = NextBiggerNumber;

                                    if (Model.Where(n => n.Number == numberCount).Any())
                                    {
                                        countTen++;
                                        LastFaction = Model.Where(n => n.Number == numberCount).Select(f => f.AvailableFractions).FirstOrDefault();

                                        if (Model.Where(n => n.Number == (numberCount + 1)).Any() && Model.Where(n => n.Number == (numberCount + 1)).Select(f => f.AvailableFractions).FirstOrDefault() == LastFaction)
                                        {
                                            inicio = (int)numberCount;
                                            numberCount++;
                                            while (Model.Where(n => n.Number == numberCount).Any() && Model.Where(n => n.Number == numberCount).Select(f => f.AvailableFractions).FirstOrDefault() == LastFaction)
                                            {
                                                LastFaction = Model.Where(n => n.Number == numberCount).Select(f => f.AvailableFractions).FirstOrDefault();
                                                fin = (int)numberCount++;
                                            }
                                            stringNumberI = inicio.ToString();
                                            stringNumberF = fin.ToString();
                                            newStringNumberS = (stringNumberI.PadLeft(production.ToString().Length, '0') + " - " + stringNumberF.PadLeft(production.ToString().Length, '0') + "." + LastFaction);

                                            <td class="text-center">@newStringNumberS</td>
                                        }
                                        else
                                        {
                                            stringNumber = numberCount.ToString();
                                            newStringNumber = stringNumber.PadLeft(production.ToString().Length, '0');
                                            CantidadFraccion = Model.Where(n => n.Number == numberCount).Select(f => f.AvailableFractions).FirstOrDefault();
                                            <td class="text-center">@newStringNumber.@CantidadFraccion</td>
                                        }
                                        if (numberCount == MaxNumber)
                                        {
                                            numberCount++;
                                        }
                                    }
                                }
                            </tr>
                            line += 1;
                        }
                    }
                }
                else
                {
                    <tr>
                        <td colspan="10" class="text-center">
                            ESTE SORTEO NO TUVO VENTAS
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
        @if (TicketsCount == 0)
        {
            <b>Total de billetes en circulación: @TicketsCount</b>
        }
        else
        {
            if (TicketFractions != 0)
            {
                var Billetes = FractionCount / Fracciones;
                var FraccionesRestantes = FractionCount % Fracciones;
                <b>Total de billetes en circulación: @Billetes</b>
                <br />
                <b>Total de fracciones en circulación: @FraccionesRestantes</b>
            }
            else
            {
                <b>Total de billetes en circulación: @TicketsCount</b>
            }
        }
    </div>

    <div class="col-lg-12 col-md-12 col-sm-12 no-padder text-center">
        <b>@adminName</b><br />
        <span>@adminCargo</span><br />
        <p>NOTA: Este reporte contiene los números que se encuentran en circulación del sorteo número @RaffleData.Id, encontrándose a la izquierda el número del billete y a la derecha la cantidad de fracciones en circulación.</p>
    </div>
</div>
