@model List<Tickets.Models.IdentifyNumber>

@{
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "RECIBO POR PAGO A PREMIO";

    var context = new Tickets.Models.TicketsEntities();
    var config = context.SystemConfigs.FirstOrDefault();
    string adminName = config != null ? config.LoteryAdmin : "";
    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("es-DO");
    var first = Model.FirstOrDefault();
    var Fund = ViewBag.payingFund;
}

<style>
    .col-lg-12 {
        width: 100%;
        float: left;
    }

    .col-lg-4 {
        width: 33.333%;
        float: left;
    }

    .col-lg-6 {
        width: 50%;
        float: left;
    }

    .text-center {
        text-align: center;
    }

    .text-right {
        text-align: right;
    }

    .text-left {
        text-align: left;
    }

    .no-padder {
        padding-left: 5px;
        padding-right: 5px;
    }
</style>

<div class="col-lg-12">
    <div class="col-lg-12 no-padder text-center">
        <div class="col-lg-12 no-padder text-center" style="margin-top: 50px;">
            <img style="height:65px; width:auto; margin-bottom:5px;" src="~/Images/logo.png" />
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>MINISTERIO DE HACIENDA</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>ADMINISTRACION DE LA LOTERIA NACIONAL</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>
                RECIBO DE PAGO POR PREMIO DEL SORTEO <br />
                @first.IdentifyBach.Raffle.Symbol @first.IdentifyBach.Raffle.Separator @first.IdentifyBach.Raffle.SequenceNumber @first.IdentifyBach.Raffle.Name
            </b>
        </div>
    </div>
    <div class="col-lg-12 no-padder">
        <div class="col-lg-6 no-padder text-left">
            <b>REFERENCIA: </b> RF-@ViewBag.invoiceDetailId <br />
            <b>CLIENTE: </b> @Model.FirstOrDefault().IdentifyBach.Client.Name <br />
            @if (Fund > 0)
            {
                <b>FONDO: </b> @ViewBag.payingFundName
                if (ViewBag.owner != null)
                {
                    <br />
                    <b>CUSTODIO: </b> @ViewBag.owner
                }
            }
        </div>
        <div class="col-lg-6 no-padder text-right">
            <b>FECHA: </b> @ViewBag.invoiceDetailDate <br />
            <b>HORA: </b> @ViewBag.invoiceDetailTime <br />
        </div>
    </div>
    <div>
        <div class="col-lg-12 no-padder">
            <table class="table">
                <thead>
                    <tr>
                        <th class="text-center">LOTE</th>
                        <th class="text-center">FECHA</th>
                        <th class="text-center">NUMERO</th>
                        <th class="text-center">TIPO DE PREMIO</th>
                        <th class="text-center">FRACCIONES DESDE-HASTA</th>
                        <th class="text-center">CANTIDAD FRACCIONES</th>
                        <th class="text-center">VALOR FRACCCION</th>
                        <th class="text-right">TOTAL</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int totalFraction = 0;
                        decimal totalGeneral = 0;
                        var identifyBachs = Model.OrderBy(i => i.IdentifyBachId);
                        var raffleAwards = context.RaffleAwards.Where(r => r.RaffleId == first.IdentifyBach.RaffleId).ToList();
                        var totalFraction2 = identifyBachs
                            .Select(s => new
                            {
                                s.NumberId,
                                total = s.FractionTo - s.FractionFrom + 1,
                                s.FractionFrom,
                                s.FractionTo
                            }).Distinct().ToList();
                        totalFraction = totalFraction2.Sum(s => s.total);
                    }
                    @if (Fund > 0)
                    {
                        Dictionary<string, int> numberList = new Dictionary<string, int> { };

                        foreach (var number in identifyBachs)
                        {
                            if (number.IdentifyBachNumberType == (int)Tickets.Models.Enums.IdentifyBachNumberTypeEnum.Gamer)
                            {
                                var raffleAwardList = raffleAwards
                                .Where(rw => rw.ControlNumber == number.TicketAllocationNumber.Number &&
                                       rw.Award.TypesAward.Creation != (int)Tickets.Models.Enums.TypesAwardCreationEnum.SameAwardDerived &&
                                       rw.Award.PayingFund == Fund).ToList();

                                foreach (var raffleAward in raffleAwardList)
                                {
                                    var price = raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber);
                                    var total = (number.FractionTo - number.FractionFrom + 1) * price;
                                    <tr>
                                        <td class="text-center">@number.IdentifyBach.SequenceNumber</td>
                                        <td class="text-center">@number.IdentifyBach.IdentifyBachPayments.ToList().Last().CreateDate.ToShortDateString()</td>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft((number.TicketAllocationNumber.TicketAllocation.Raffle.Prospect.Production - 1).ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@number.FractionFrom - @number.FractionTo</td>
                                        <td class="text-center">@(number.FractionTo - number.FractionFrom + 1)</td>
                                        <td class="text-center">@price.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@total.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                    if (!numberList.Any(a => a.Key == String.Concat(number.TicketAllocationNumber.Number.ToString(), number.FractionFrom, '-', number.FractionTo)))
                                    {
                                        numberList.Add(String.Concat(number.TicketAllocationNumber.Number.ToString(), number.FractionFrom, '-', number.FractionTo), (number.FractionTo - number.FractionFrom + 1));
                                    }
                                    totalGeneral += total;
                                }
                            }
                            else if (number.IdentifyBachNumberType == (int)Tickets.Models.Enums.IdentifyBachNumberTypeEnum.Seller)
                            {
                                var raffleAwardList = raffleAwards
                                .Where(rw => rw.ControlNumber == number.TicketAllocationNumber.Number &&
                                       rw.Award.TypesAward.Creation == (int)Tickets.Models.Enums.TypesAwardCreationEnum.SameAwardDerived &&
                                       rw.Award.PayingFund == Fund).ToList();

                                foreach (var raffleAward in raffleAwardList)
                                {
                                    var price = raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber);
                                    var total = (number.FractionTo - number.FractionFrom + 1) * price;
                                    <tr>
                                        <td class="text-center">@number.IdentifyBach.SequenceNumber</td>
                                        <td class="text-center">@number.IdentifyBach.IdentifyBachPayments.ToList().Last().CreateDate.ToShortDateString()</td>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft((number.TicketAllocationNumber.TicketAllocation.Raffle.Prospect.Production - 1).ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@number.FractionFrom - @number.FractionTo</td>
                                        <td class="text-center">@(number.FractionTo - number.FractionFrom + 1)</td>
                                        <td class="text-center">@price.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@total.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                    if (!numberList.Any(a => a.Key == String.Concat(number.TicketAllocationNumber.Number.ToString(), number.FractionFrom, '-', number.FractionTo)))
                                    {
                                        numberList.Add(String.Concat(number.TicketAllocationNumber.Number.ToString(), number.FractionFrom, '-', number.FractionTo), (number.FractionTo - number.FractionFrom + 1));
                                    }
                                    totalGeneral += total;
                                }
                            }
                        }
                        totalFraction = numberList.Select(s => new
                        {
                            Number = s.Key,
                            Fractions = s.Value
                        }).Distinct().ToList().Sum(ss => ss.Fractions);
                    }
                    else
                    {
                        foreach (var number in identifyBachs)
                        {
                            if (number.IdentifyBachNumberType == (int)Tickets.Models.Enums.IdentifyBachNumberTypeEnum.Gamer)
                            {
                                var raffleAwardList = raffleAwards
                                .Where(rw => rw.ControlNumber == number.TicketAllocationNumber.Number &&
                                       rw.Award.TypesAward.Creation != (int)Tickets.Models.Enums.TypesAwardCreationEnum.SameAwardDerived).ToList();

                                foreach (var raffleAward in raffleAwardList)
                                {
                                    var price = raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber);
                                    var total = (number.FractionTo - number.FractionFrom + 1) * price;
                                    <tr>
                                        <td class="text-center">@number.IdentifyBach.SequenceNumber</td>
                                        <td class="text-center">@number.IdentifyBach.IdentifyBachPayments.ToList().Last().CreateDate.ToShortDateString()</td>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft((number.TicketAllocationNumber.TicketAllocation.Raffle.Prospect.Production - 1).ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@number.FractionFrom - @number.FractionTo</td>
                                        <td class="text-center">@(number.FractionTo - number.FractionFrom + 1)</td>
                                        <td class="text-center">@price.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@total.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                    totalGeneral += total;
                                }
                            }
                            else if (number.IdentifyBachNumberType == (int)Tickets.Models.Enums.IdentifyBachNumberTypeEnum.Seller)
                            {
                                var raffleAwardList = raffleAwards
                                .Where(rw => rw.ControlNumber == number.TicketAllocationNumber.Number &&
                                       rw.Award.TypesAward.Creation == (int)Tickets.Models.Enums.TypesAwardCreationEnum.SameAwardDerived).ToList();

                                foreach (var raffleAward in raffleAwardList)
                                {
                                    var price = raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber);
                                    var total = (number.FractionTo - number.FractionFrom + 1) * price;
                                    <tr>
                                        <td class="text-center">@number.IdentifyBach.SequenceNumber</td>
                                        <td class="text-center">@number.IdentifyBach.IdentifyBachPayments.ToList().Last().CreateDate.ToShortDateString()</td>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft((number.TicketAllocationNumber.TicketAllocation.Raffle.Prospect.Production - 1).ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@number.FractionFrom - @number.FractionTo</td>
                                        <td class="text-center">@(number.FractionTo - number.FractionFrom + 1)</td>
                                        <td class="text-center">@price.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@total.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                    totalGeneral += total;
                                }
                            }
                        }
                    }
                    <tr class="total">
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td class="text-center"><strong>@totalFraction.ToString("n0", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                        <td class="text-right" colspan="2">Subtotal a pagar: <strong> @((totalGeneral).ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="col-lg-12 no-padder text-center">
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Firma cajero
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Recibido por Btes. Pdos.
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Perforado
    </div>
</div>
<div class="col-lg-12 no-padder text-center" style="margin-top:15px;">
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Firma enc. de caja
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Revisado por
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Autorizado por
    </div>
</div>
