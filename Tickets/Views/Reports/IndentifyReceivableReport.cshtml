@model Tickets.Models.PaymentReceivableReportModel
@using Tickets.Models.Enums

@{
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "RECIBO DE PAGO A PREMIO NO. " + String.Concat(Model.Nomenclature, "-", Model.SequenceNumberPayment.Value.ToString().PadLeft(Model.Digits, '0')) + " DEL SORTEO NO. " + Model.IdentifyBach.Raffle.Symbol + Model.IdentifyBach.Raffle.Separator + Model.IdentifyBach.Raffle.SequenceNumber;

    var context = new Tickets.Models.TicketsEntities();
    var config = context.SystemConfigs.FirstOrDefault();
    string adminName = config != null ? config.CajaGeneral : "";
    string adminCargo = config != null ? config.CajaGeneralCargo : "";
    var raffleAwards = context.Raffles.FirstOrDefault(r => r.Id == Model.IdentifyBach.RaffleId).RaffleAwards.ToList();
    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("es-ES");
    var RaffleData = context.Raffles.Where(w => w.Id == Model.RaffleId).FirstOrDefault();
    var LawDiscount = context.SystemConfigs.FirstOrDefault().LawDiscountPercentMayor;
}

<style>
    .col-lg-12 {
        width: 100%;
        float: left;
    }

    .col-lg-4 {
        width: 33.333%;
        float: left;
    }

    .col-lg-6 {
        width: 50%;
        float: left;
    }

    .text-center {
        text-align: center;
    }

    .text-right {
        text-align: right;
    }

    .text-left {
        text-align: left;
    }

    .no-padder {
        padding-left: 5px;
        padding-right: 5px;
    }
</style>

<div class="col-lg-12">
    <div class="col-lg-12 no-padder text-center">
        <div class="col-lg-12 no-padder text-center" style="margin-top: 50px;">
            <img style="height:65px; width:auto; margin-bottom:5px;" src="~/Images/logo.png" />
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>MINISTERIO DE HACIENDA</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>ADMINISTRACION DE LA LOTERIA NACIONAL</b>
        </div>
        <div class="col-lg-12 no-padder text-center">
            <b>
                RECIBO DE PAGO A PREMIO DEL SORTEO <br />
                @RaffleData.Symbol @RaffleData.Separator @RaffleData.SequenceNumber @RaffleData.Name @RaffleData.DateSolteo.ToString("dd/MM/yyyy")
            </b>
        </div>
    </div>
    <div class="col-lg-12 no-padder">
        <div class="col-lg-6 no-padder text-left">
            <b>Cliente: </b> @Model.ClientName<br />
            @if (Model.CreditNoteId == 0)
            {
                if ((Model.PaymentTypeId != null || Model.PaymentTypeId == null) && Model.PaymentTypeId == (int)BachPaymentTypeEnum.Cash)
                {
                    <b>RECIBO PAGO EN EFECTIVO: </b> @(String.Concat(Model.Nomenclature, "-", Model.SequenceNumberPayment.Value.ToString().PadLeft(Model.Digits, '0')))<br />
                }
                else if (Model.PaymentTypeId == (int)BachPaymentTypeEnum.Check)
                {
                    <b>RECIBO PAGO EN CHEQUE: </b> @(String.Concat(Model.Nomenclature, "-", Model.SequenceNumberPayment.Value.ToString().PadLeft(Model.Digits, '0')))<br />
                }
                else if (Model.PaymentTypeId == (int)BachPaymentTypeEnum.Nature)
                {
                    <b>RECIBO PAGO EN NATURALEZA: </b> @(String.Concat(Model.Nomenclature, "-", Model.SequenceNumberPayment.Value.ToString().PadLeft(Model.Digits, '0')))<br />
                }
            }
            else
            {
                <b>Nota de Credito: </b> @(Model.Nomenclature == null ? Model.SequenceNumberPayment.Value.ToString() : string.Concat(Model.Nomenclature, Model.SequenceNumberPayment.Value.ToString().PadLeft(5, '0')))<br />
            }
        </div>
        <div class="col-lg-6 no-padder text-right">
            <b>FECHA: </b> @Model.CreateDate.ToString("dd/MM/yyyy") <br />
            <b>HORA: </b> @Model.CreateDate.ToString("hh:mm:ss tt") <br />
        </div>
    </div>
    <div>
        <div class="col-lg-12 no-padder">
            <table class="table">
                <thead>
                    <tr>
                        <th class="text-center">LOTE</th>
                        <th class="text-center">NUMERO</th>
                        <th class="text-center">PREMIO</th>
                        <th class="text-center">FRAC.</th>
                        <th class="text-center">CANT. FRAC.</th>
                        <th class="text-center">VALOR FRAC.</th>
                        <th class="text-center">TOTAL FRAC.</th>
                        <th class="text-center">DESC.</th>
                        <th class="text-center">RETEN.</th>
                        <th class="text-center">TOTAL DESC.</th>
                        <th class="text-center">TOTAL RETEN.</th>
                        <th class="text-right">TOTAL</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int TotalFraction = 0;
                        decimal TotalAwardByFraction = 0.0m;
                        decimal TotalAwardMountDiscount = 0.0m;
                        decimal TotalAwardMountReten = 0.0m;
                        decimal TotalGeneralToPay = 0.0m;

                        var totalFraction2 = Model.IdentifyBach.IdentifyNumbers
                            .Select(s => new
                            {
                                s.NumberId,
                                total = s.FractionTo - s.FractionFrom + 1,
                                s.FractionFrom,
                                s.FractionTo
                            }).Distinct().ToList();
                        TotalFraction = totalFraction2.Sum(s => s.total);
                    }

                    @if (Model.IdentifyBach.IdentifyType == (int)Tickets.Models.Enums.IdentifyBachTypeEnum.Gamers)
                    {
                        foreach (var number in Model.IdentifyBach.IdentifyNumbers)
                        {
                            var raffleAwardList = raffleAwards.Where(rw => rw.ControlNumber == number.TicketAllocationNumber.Number
                            && number.TicketAllocationNumber.Id == number.NumberId
                            && rw.Award.TypesAward.Creation != (int)Tickets.Models.Enums.TypesAwardCreationEnum.SameAwardDerived).ToList();

                            if ((Model.PaymentTypeId != null || Model.PaymentTypeId == null) && Model.PaymentTypeId == (int)BachPaymentTypeEnum.Cash)
                            {
                                raffleAwardList = raffleAwardList.Where(w => w.Award.TypesAwardId != (int)AwardTypeEnum.AutomaticAwardInNature && w.Award.TypesAwardId != (int)AwardTypeEnum.AdditionalAwardInNature).ToList();
                            }
                            else if (Model.PaymentTypeId == (int)BachPaymentTypeEnum.Check)
                            {
                                raffleAwardList = raffleAwardList.Where(w => w.Award.TypesAwardId != (int)AwardTypeEnum.AutomaticAwardInNature && w.Award.TypesAwardId != (int)AwardTypeEnum.AdditionalAwardInNature).ToList();
                            }
                            else if (Model.PaymentTypeId == (int)BachPaymentTypeEnum.Nature)
                            {
                                raffleAwardList = raffleAwardList.Where(w => w.Award.TypesAwardId == (int)AwardTypeEnum.AutomaticAwardInNature || w.Award.TypesAwardId == (int)AwardTypeEnum.AdditionalAwardInNature).ToList();
                            }

                            bool wfrac = true;
                            var fFrom = number.FractionFrom;
                            var fTo = number.FractionTo;
                            foreach (var a in raffleAwardList.Where(w => w.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S))
                            {
                                for (int i = fFrom; i <= fTo; i++)
                                {
                                    if (i == a.Fraction)
                                    {
                                        wfrac = true;
                                        break;
                                    }
                                    else
                                    {
                                        wfrac = false;
                                    }
                                }
                            }
                            if (wfrac == false)
                            {
                                raffleAwardList.RemoveAll(w => w.ControlNumber == number.TicketAllocationNumber.Number && w.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S);
                            }

                            foreach (var raffleAward in raffleAwardList)
                            {
                                decimal AwardByFraction = raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber);
                                decimal AwardValue = raffleAward.Award.Value;
                                var Fractions = number.FractionTo - number.FractionFrom + 1;
                                decimal AwardLawDiscount = raffleAward.Award.ByFraction == (int)ByFractionEnum.S || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.Mayors ? (decimal)LawDiscount : 0;
                                decimal AwardLawReten = (raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AdditionalAwardInNature || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AutomaticAwardInNature) && raffleAward.Award.Value > 100000 ? (decimal)LawDiscount : 0;
                                decimal AwardMountDiscount = raffleAward.Award.ByFraction == (int)ByFractionEnum.S || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.Mayors ? (AwardByFraction * ((decimal)LawDiscount / 100)) : 0;
                                decimal AwardMountReten = (raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AdditionalAwardInNature || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AutomaticAwardInNature) && raffleAward.Award.Value > 100000 ? (raffleAward.Award.Value * (decimal)LawDiscount / 100) : 0;
                                decimal TotalByFraction = AwardByFraction * Fractions;
                                decimal TotalToPay = TotalByFraction - AwardMountDiscount;

                                if (raffleAward.Award.TypesAward.Id == (int)Tickets.Models.Enums.AwardTypeEnum.WinFraction)
                                {
                                    <tr>
                                        <td class="text-center">@number.IdentifyBach.SequenceNumber</td>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft(Model.Production.ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@(raffleAward.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? raffleAward.Fraction.ToString() : "")</td>
                                        <td class="text-center">1</td>
                                        <td class="text-center">@AwardValue.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@AwardValue.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@AwardLawDiscount %</td>
                                        <td class="text-center">@AwardLawReten %</td>
                                        <td class="text-center">@AwardMountDiscount.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@AwardMountReten.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@TotalToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td class="text-center">@number.IdentifyBach.SequenceNumber</td>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft(Model.Production.ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@number.FractionFrom - @number.FractionTo</td>
                                        <td class="text-center">@Fractions</td>
                                        <td class="text-center">@AwardByFraction.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@TotalByFraction.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@AwardLawDiscount %</td>
                                        <td class="text-center">@AwardLawReten %</td>
                                        <td class="text-center">@AwardMountDiscount.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@AwardMountReten.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@TotalToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                }

                                TotalAwardByFraction += AwardByFraction;
                                TotalAwardMountDiscount += AwardMountDiscount;
                                TotalAwardMountReten += AwardMountReten;
                                TotalGeneralToPay += TotalToPay;
                            }
                        }

                        var identifyBach = context.IdentifyBaches.FirstOrDefault(i => i.Id == Model.IdentifyBach.Id);

                        decimal totalPayment = 0.0m;
                        if (identifyBach.IdentifyBachPayments.Count > 0)
                        {
                            totalPayment += identifyBach.IdentifyBachPayments.Select(i => i.Value).Aggregate((i, e) => i + e);
                        }
                        if (identifyBach.NoteCredits.Count > 0)
                        {
                            totalPayment += identifyBach.NoteCredits.Select(i => i.TotalCash).Aggregate((i, e) => i + e);
                        }

                        decimal percentValue = TotalGeneralToPay * (((decimal)Model.ReceivablePercent) / 100);

                        <tr class="total">
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td class="text-center"><strong>@TotalFraction.ToString("n0", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                            <td></td>
                            <td class="text-center"><strong>@TotalAwardByFraction.ToString("c", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                            <td></td>
                            <td></td>
                            <td class="text-center"><strong>@TotalAwardMountDiscount.ToString("c", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                            <td class="text-center"><strong>@TotalAwardMountReten.ToString("c", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                            <td class="text-right"><strong> @TotalGeneralToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                        </tr>
                        if (Model.ReceivablePercent > 0)
                        {
                            <tr class="total">
                                <td class="text-right" style="border-top: none;" colspan="12">COMISION MAYORISTA @(Model.ReceivablePercent)%: <strong> @((percentValue).ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong></td>
                            </tr>
                        }
                        <tr class="total">
                            <td class="text-right" style="border-top: none;" colspan="12">MONTO DESCONTADO: <strong> @(TotalAwardMountDiscount.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong></td>
                        </tr>
                        <tr class="total">
                            <td class="text-right" style="border-top: none;" colspan="12">MONTO A RETENER: <strong> @(TotalAwardMountReten.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong></td>
                        </tr>
                        <tr class="total">
                            <td class="text-right" style="border-top: none;" colspan="12">TOTAL A PAGAR: <strong> @((TotalGeneralToPay + percentValue).ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong></td>
                        </tr>
                    }
                    else if (Model.IdentifyBach.IdentifyType == (int)Tickets.Models.Enums.IdentifyBachTypeEnum.Sellers)
                    {
                        foreach (var number in Model.IdentifyBach.IdentifyNumbers)
                        {
                            var raffleAwardList = raffleAwards.Where(rw => rw.ControlNumber == number.TicketAllocationNumber.Number
                            && number.TicketAllocationNumber.Id == number.NumberId
                            && rw.Award.TypesAward.Creation == (int)Tickets.Models.Enums.TypesAwardCreationEnum.SameAwardDerived).ToList();

                            if ((Model.PaymentTypeId != null || Model.PaymentTypeId == null) && Model.PaymentTypeId == (int)BachPaymentTypeEnum.Cash)
                            {
                                raffleAwardList = raffleAwardList.Where(w => w.Award.TypesAwardId != (int)AwardTypeEnum.AutomaticAwardInNature && w.Award.TypesAwardId != (int)AwardTypeEnum.AdditionalAwardInNature).ToList();
                            }
                            else if (Model.PaymentTypeId == (int)BachPaymentTypeEnum.Check)
                            {
                                raffleAwardList = raffleAwardList.Where(w => w.Award.TypesAwardId != (int)AwardTypeEnum.AutomaticAwardInNature && w.Award.TypesAwardId != (int)AwardTypeEnum.AdditionalAwardInNature).ToList();
                            }
                            else if (Model.PaymentTypeId == (int)BachPaymentTypeEnum.Nature)
                            {
                                raffleAwardList = raffleAwardList.Where(w => w.Award.TypesAwardId == (int)AwardTypeEnum.AutomaticAwardInNature || w.Award.TypesAwardId == (int)AwardTypeEnum.AdditionalAwardInNature).ToList();
                            }

                            bool wfrac = true;
                            var fFrom = number.FractionFrom;
                            var fTo = number.FractionTo;
                            foreach (var a in raffleAwardList.Where(w => w.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S))
                            {
                                for (int i = fFrom; i <= fTo; i++)
                                {
                                    if (i == a.Fraction)
                                    {
                                        wfrac = true;
                                        break;
                                    }
                                    else
                                    {
                                        wfrac = false;
                                    }
                                }
                            }
                            if (wfrac == false)
                            {
                                raffleAwardList.RemoveAll(w => w.ControlNumber == number.TicketAllocationNumber.Number && w.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S);
                            }

                            foreach (var raffleAward in raffleAwardList)
                            {
                                decimal AwardByFraction = raffleAward.Award.Value / (raffleAward.Raffle.Prospect.LeafFraction * raffleAward.Raffle.Prospect.LeafNumber);
                                decimal AwardValue = raffleAward.Award.Value;
                                var Fractions = number.FractionTo - number.FractionFrom + 1;
                                decimal AwardLawDiscount = raffleAward.Award.ByFraction == (int)ByFractionEnum.S || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.Mayors ? (decimal)LawDiscount : 0;
                                decimal AwardLawReten = (raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AdditionalAwardInNature || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AutomaticAwardInNature) && raffleAward.Award.Value > 100000 ? (decimal)LawDiscount : 0;
                                decimal AwardMountDiscount = raffleAward.Award.ByFraction == (int)ByFractionEnum.S || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.Mayors ? (AwardByFraction * ((decimal)LawDiscount / 100)) : 0;
                                decimal AwardMountReten = (raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AdditionalAwardInNature || raffleAward.Award.TypesAwardId == (int)AwardTypeEnum.AutomaticAwardInNature) && raffleAward.Award.Value > 100000 ? (raffleAward.Award.Value * (decimal)LawDiscount / 100) : 0;
                                decimal TotalByFraction = AwardByFraction * Fractions;
                                decimal TotalToPay = TotalByFraction - AwardMountDiscount;

                                if (raffleAward.Award.TypesAward.Id == (int)Tickets.Models.Enums.AwardTypeEnum.WinFraction)
                                {
                                    <tr>
                                        <td class="text-center">@number.IdentifyBach.SequenceNumber</td>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft(Model.Production.ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@(raffleAward.Award.ByFraction == (int)Tickets.Models.Enums.ByFractionEnum.S ? raffleAward.Fraction.ToString() : "")</td>
                                        <td class="text-center">1</td>
                                        <td class="text-center">@AwardValue.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@AwardValue.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@AwardLawDiscount %</td>
                                        <td class="text-center">@AwardLawReten %</td>
                                        <td class="text-center">@AwardMountDiscount.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@AwardMountReten.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@TotalToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td class="text-center">@number.IdentifyBach.SequenceNumber</td>
                                        <td class="text-center">@number.TicketAllocationNumber.Number.ToString().PadLeft(Model.Production.ToString().Length, '0')</td>
                                        <td class="text-center">@raffleAward.Award.Name</td>
                                        <td class="text-center">@number.FractionFrom - @number.FractionTo</td>
                                        <td class="text-center">@Fractions</td>
                                        <td class="text-center">@AwardByFraction.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@TotalByFraction.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@AwardLawDiscount %</td>
                                        <td class="text-center">@AwardLawReten %</td>
                                        <td class="text-center">@AwardMountDiscount.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-center">@AwardMountReten.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                        <td class="text-right">@TotalToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</td>
                                    </tr>
                                }

                                TotalAwardByFraction += AwardByFraction;
                                TotalAwardMountDiscount += AwardMountDiscount;
                                TotalAwardMountReten += AwardMountReten;
                                TotalGeneralToPay += TotalToPay;
                            }
                        }

                        var identifyBach = context.IdentifyBaches.FirstOrDefault(i => i.Id == Model.IdentifyBach.Id);

                        decimal totalPayment = 0.0m;
                        if (identifyBach.IdentifyBachPayments.Count > 0)
                        {
                            totalPayment += identifyBach.IdentifyBachPayments.Select(i => i.Value).Aggregate((i, e) => i + e);
                        }
                        if (identifyBach.NoteCredits.Count > 0)
                        {
                            totalPayment += identifyBach.NoteCredits.Select(i => i.TotalCash).Aggregate((i, e) => i + e);
                        }

                        decimal percentValue = TotalGeneralToPay * (((decimal)Model.ReceivablePercent) / 100);

                        <tr class="total">
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td class="text-center"><strong>@TotalFraction.ToString("n0", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                            <td></td>
                            <td class="text-center"><strong>@TotalAwardByFraction.ToString("c", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                            <td></td>
                            <td></td>
                            <td class="text-center"><strong>@TotalAwardMountDiscount.ToString("c", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                            <td class="text-center"><strong>@TotalAwardMountReten.ToString("c", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                            <td class="text-right"><strong> @TotalGeneralToPay.ToString("c", new System.Globalization.CultureInfo("es-DO"))</strong></td>
                        </tr>
                        if (Model.ReceivablePercent > 0)
                        {
                            <tr class="total">
                                <td class="text-right" style="border-top: none;" colspan="12">COMISION MAYORISTA @(Model.ReceivablePercent)%: <strong> @((percentValue).ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong></td>
                            </tr>
                        }
                        <tr class="total">
                            <td class="text-right" style="border-top: none;" colspan="12">MONTO DESCONTADO: <strong> @(TotalAwardMountDiscount.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong></td>
                        </tr>
                        <tr class="total">
                            <td class="text-right" style="border-top: none;" colspan="12">MONTO A RETENER: <strong> @(TotalAwardMountReten.ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong></td>
                        </tr>
                        <tr class="total">
                            <td class="text-right" style="border-top: none;" colspan="12">TOTAL A PAGAR: <strong> @((TotalGeneralToPay + percentValue).ToString("c",  new System.Globalization.CultureInfo("es-DO")))</strong></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="col-lg-12 no-padder text-center">
    <br />
    <br />
    <div class="col-lg-4 col-md-6 col-sm-6 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Firma del ganador
    </div>
    <div class="col-lg-4 col-md-6 col-sm-6 text-center">
        <div class="col-lg-12 no-padder text-center">
        </div>
    </div>
    <div class="col-lg-4 col-md-6 col-sm-6 text-center">
        <div class="col-lg-12 no-padder text-center">
            ______________________________
        </div>
        Firma del cajero
    </div>
</div>

<div class="col-lg-12 no-padder text-center">
    <b>@adminName</b>
</div>
<div class="col-lg-12 no-padder text-center">
    <span>@adminCargo</span>
</div>
